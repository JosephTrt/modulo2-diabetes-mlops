2024-11-24 12:47:55,830:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 12:47:55,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 12:47:55,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 12:47:55,832:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 12:48:14,078:INFO:PyCaret ClassificationExperiment
2024-11-24 12:48:14,079:INFO:Logging name: clf-default-name
2024-11-24 12:48:14,079:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-24 12:48:14,079:INFO:version 3.3.2
2024-11-24 12:48:14,079:INFO:Initializing setup()
2024-11-24 12:48:14,079:INFO:self.USI: b4cb
2024-11-24 12:48:14,079:INFO:self._variable_keys: {'pipeline', 'n_jobs_param', 'fix_imbalance', 'gpu_param', '_available_plots', 'data', 'gpu_n_jobs_param', 'X', 'X_train', 'target_param', 'fold_groups_param', 'idx', 'USI', 'y_test', 'memory', 'y', 'exp_id', '_ml_usecase', 'seed', 'is_multiclass', 'exp_name_log', 'logging_param', 'log_plots_param', 'fold_generator', 'y_train', 'X_test', 'fold_shuffle_param', 'html_param'}
2024-11-24 12:48:14,079:INFO:Checking environment
2024-11-24 12:48:14,079:INFO:python_version: 3.9.20
2024-11-24 12:48:14,079:INFO:python_build: ('main', 'Oct  3 2024 07:38:01')
2024-11-24 12:48:14,079:INFO:machine: AMD64
2024-11-24 12:48:14,079:INFO:platform: Windows-10-10.0.22621-SP0
2024-11-24 12:48:14,084:INFO:Memory: svmem(total=34266886144, available=20712304640, percent=39.6, used=13554581504, free=20712304640)
2024-11-24 12:48:14,084:INFO:Physical Core: 6
2024-11-24 12:48:14,084:INFO:Logical Core: 12
2024-11-24 12:48:14,084:INFO:Checking libraries
2024-11-24 12:48:14,084:INFO:System:
2024-11-24 12:48:14,084:INFO:    python: 3.9.20 (main, Oct  3 2024, 07:38:01) [MSC v.1929 64 bit (AMD64)]
2024-11-24 12:48:14,084:INFO:executable: c:\Users\trepa\anaconda3\envs\mlops_course\python.exe
2024-11-24 12:48:14,084:INFO:   machine: Windows-10-10.0.22621-SP0
2024-11-24 12:48:14,084:INFO:PyCaret required dependencies:
2024-11-24 12:48:14,569:INFO:                 pip: 24.2
2024-11-24 12:48:14,569:INFO:          setuptools: 75.1.0
2024-11-24 12:48:14,569:INFO:             pycaret: 3.3.2
2024-11-24 12:48:14,569:INFO:             IPython: 8.18.1
2024-11-24 12:48:14,571:INFO:          ipywidgets: 8.1.5
2024-11-24 12:48:14,571:INFO:                tqdm: 4.67.0
2024-11-24 12:48:14,571:INFO:               numpy: 1.26.4
2024-11-24 12:48:14,571:INFO:              pandas: 2.1.4
2024-11-24 12:48:14,571:INFO:              jinja2: 3.1.4
2024-11-24 12:48:14,571:INFO:               scipy: 1.11.4
2024-11-24 12:48:14,571:INFO:              joblib: 1.3.2
2024-11-24 12:48:14,571:INFO:             sklearn: 1.4.2
2024-11-24 12:48:14,571:INFO:                pyod: 2.0.2
2024-11-24 12:48:14,571:INFO:            imblearn: 0.12.4
2024-11-24 12:48:14,571:INFO:   category_encoders: 2.6.4
2024-11-24 12:48:14,571:INFO:            lightgbm: 4.5.0
2024-11-24 12:48:14,571:INFO:               numba: 0.60.0
2024-11-24 12:48:14,571:INFO:            requests: 2.32.3
2024-11-24 12:48:14,571:INFO:          matplotlib: 3.7.5
2024-11-24 12:48:14,571:INFO:          scikitplot: 0.3.7
2024-11-24 12:48:14,571:INFO:         yellowbrick: 1.5
2024-11-24 12:48:14,571:INFO:              plotly: 5.24.1
2024-11-24 12:48:14,571:INFO:    plotly-resampler: Not installed
2024-11-24 12:48:14,571:INFO:             kaleido: 0.2.1
2024-11-24 12:48:14,571:INFO:           schemdraw: 0.15
2024-11-24 12:48:14,571:INFO:         statsmodels: 0.14.4
2024-11-24 12:48:14,571:INFO:              sktime: 0.26.0
2024-11-24 12:48:14,571:INFO:               tbats: 1.1.3
2024-11-24 12:48:14,571:INFO:            pmdarima: 2.0.4
2024-11-24 12:48:14,571:INFO:              psutil: 6.1.0
2024-11-24 12:48:14,571:INFO:          markupsafe: 3.0.2
2024-11-24 12:48:14,571:INFO:             pickle5: Not installed
2024-11-24 12:48:14,571:INFO:         cloudpickle: 3.1.0
2024-11-24 12:48:14,571:INFO:         deprecation: 2.1.0
2024-11-24 12:48:14,571:INFO:              xxhash: 3.5.0
2024-11-24 12:48:14,571:INFO:           wurlitzer: Not installed
2024-11-24 12:48:14,571:INFO:PyCaret optional dependencies:
2024-11-24 12:48:14,583:INFO:                shap: Not installed
2024-11-24 12:48:14,583:INFO:           interpret: Not installed
2024-11-24 12:48:14,583:INFO:                umap: Not installed
2024-11-24 12:48:14,583:INFO:     ydata_profiling: Not installed
2024-11-24 12:48:14,583:INFO:  explainerdashboard: Not installed
2024-11-24 12:48:14,583:INFO:             autoviz: Not installed
2024-11-24 12:48:14,583:INFO:           fairlearn: Not installed
2024-11-24 12:48:14,583:INFO:          deepchecks: Not installed
2024-11-24 12:48:14,583:INFO:             xgboost: Not installed
2024-11-24 12:48:14,583:INFO:            catboost: Not installed
2024-11-24 12:48:14,583:INFO:              kmodes: Not installed
2024-11-24 12:48:14,583:INFO:             mlxtend: Not installed
2024-11-24 12:48:14,583:INFO:       statsforecast: Not installed
2024-11-24 12:48:14,583:INFO:        tune_sklearn: Not installed
2024-11-24 12:48:14,583:INFO:                 ray: Not installed
2024-11-24 12:48:14,583:INFO:            hyperopt: Not installed
2024-11-24 12:48:14,583:INFO:              optuna: Not installed
2024-11-24 12:48:14,584:INFO:               skopt: Not installed
2024-11-24 12:48:14,584:INFO:              mlflow: Not installed
2024-11-24 12:48:14,584:INFO:              gradio: Not installed
2024-11-24 12:48:14,584:INFO:             fastapi: Not installed
2024-11-24 12:48:14,584:INFO:             uvicorn: Not installed
2024-11-24 12:48:14,584:INFO:              m2cgen: Not installed
2024-11-24 12:48:14,584:INFO:           evidently: Not installed
2024-11-24 12:48:14,584:INFO:               fugue: Not installed
2024-11-24 12:48:14,584:INFO:           streamlit: Not installed
2024-11-24 12:48:14,584:INFO:             prophet: Not installed
2024-11-24 12:48:14,584:INFO:None
2024-11-24 12:48:14,584:INFO:Set up data.
2024-11-24 12:48:14,590:INFO:Set up folding strategy.
2024-11-24 12:48:14,590:INFO:Set up train/test split.
2024-11-24 12:48:15,548:INFO:Set up index.
2024-11-24 12:48:15,548:INFO:Assigning column types.
2024-11-24 12:48:15,550:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-24 12:48:15,602:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,606:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,645:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,645:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,698:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,699:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,813:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,814:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-24 12:48:15,859:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,887:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,887:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,932:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 12:48:15,961:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,961:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:15,962:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-24 12:48:16,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,113:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,113:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,115:INFO:Preparing preprocessing pipeline...
2024-11-24 12:48:16,115:INFO:Set up label encoding.
2024-11-24 12:48:16,116:INFO:Set up simple imputation.
2024-11-24 12:48:16,120:INFO:Set up encoding of ordinal features.
2024-11-24 12:48:16,131:INFO:Set up encoding of categorical features.
2024-11-24 12:48:16,132:INFO:Set up column name cleaning.
2024-11-24 12:48:16,271:INFO:Finished creating preprocessing pipeline.
2024-11-24 12:48:16,368:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\trepa\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                         'mapping': No                   0
Yes                  1
NaN                 -1
dtype: int64},
                                                                        {'col': 'Alopecia ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No           0
Yes          1
NaN         -1
dtype: int64},
                                                                        {'col': 'Obesity ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No          0
Yes         1
NaN        -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-24 12:48:16,369:INFO:Creating final display dataframe.
2024-11-24 12:48:16,695:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target                     class
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                 (520, 17)
5        Transformed data shape                 (520, 17)
6   Transformed train set shape                 (364, 17)
7    Transformed test set shape                 (156, 17)
8              Numeric features                         1
9          Categorical features                        15
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      b4cb
2024-11-24 12:48:16,775:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,854:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 12:48:16,855:INFO:setup() successfully completed in 2.78s...............
2024-11-24 12:50:33,139:INFO:Initializing compare_models()
2024-11-24 12:50:33,139:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-24 12:50:33,139:INFO:Checking exceptions
2024-11-24 12:50:33,142:INFO:Preparing display monitor
2024-11-24 12:50:33,162:INFO:Initializing Logistic Regression
2024-11-24 12:50:33,162:INFO:Total runtime is 0.0 minutes
2024-11-24 12:50:33,165:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:33,165:INFO:Initializing create_model()
2024-11-24 12:50:33,165:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:33,165:INFO:Checking exceptions
2024-11-24 12:50:33,165:INFO:Importing libraries
2024-11-24 12:50:33,165:INFO:Copying training dataset
2024-11-24 12:50:33,168:INFO:Defining folds
2024-11-24 12:50:33,168:INFO:Declaring metric variables
2024-11-24 12:50:33,171:INFO:Importing untrained model
2024-11-24 12:50:33,174:INFO:Logistic Regression Imported successfully
2024-11-24 12:50:33,180:INFO:Starting cross validation
2024-11-24 12:50:33,181:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:36,959:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:36,963:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:36,966:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,003:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,007:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,010:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,015:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,018:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,041:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,044:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,047:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,050:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,052:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,052:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,056:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,056:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,057:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,059:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,059:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,060:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,060:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,062:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,062:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,063:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,064:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,065:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,066:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,069:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,084:INFO:Calculating mean and std
2024-11-24 12:50:37,086:INFO:Creating metrics dataframe
2024-11-24 12:50:37,088:INFO:Uploading results into container
2024-11-24 12:50:37,089:INFO:Uploading model into container now
2024-11-24 12:50:37,089:INFO:_master_model_container: 1
2024-11-24 12:50:37,090:INFO:_display_container: 2
2024-11-24 12:50:37,090:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-24 12:50:37,091:INFO:create_model() successfully completed......................................
2024-11-24 12:50:37,195:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:37,195:INFO:Creating metrics dataframe
2024-11-24 12:50:37,199:INFO:Initializing K Neighbors Classifier
2024-11-24 12:50:37,200:INFO:Total runtime is 0.06729746659596761 minutes
2024-11-24 12:50:37,202:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:37,202:INFO:Initializing create_model()
2024-11-24 12:50:37,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:37,202:INFO:Checking exceptions
2024-11-24 12:50:37,202:INFO:Importing libraries
2024-11-24 12:50:37,202:INFO:Copying training dataset
2024-11-24 12:50:37,206:INFO:Defining folds
2024-11-24 12:50:37,206:INFO:Declaring metric variables
2024-11-24 12:50:37,209:INFO:Importing untrained model
2024-11-24 12:50:37,212:INFO:K Neighbors Classifier Imported successfully
2024-11-24 12:50:37,217:INFO:Starting cross validation
2024-11-24 12:50:37,218:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:37,548:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,550:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,553:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,554:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,554:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,557:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,557:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,557:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,560:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,565:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,566:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,568:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,569:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,572:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,573:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,573:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,576:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,580:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,580:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,581:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,583:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,587:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,587:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:37,591:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,353:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,354:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,356:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,358:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,360:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,362:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,379:INFO:Calculating mean and std
2024-11-24 12:50:39,380:INFO:Creating metrics dataframe
2024-11-24 12:50:39,381:INFO:Uploading results into container
2024-11-24 12:50:39,382:INFO:Uploading model into container now
2024-11-24 12:50:39,382:INFO:_master_model_container: 2
2024-11-24 12:50:39,382:INFO:_display_container: 2
2024-11-24 12:50:39,382:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-24 12:50:39,383:INFO:create_model() successfully completed......................................
2024-11-24 12:50:39,462:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:39,462:INFO:Creating metrics dataframe
2024-11-24 12:50:39,467:INFO:Initializing Naive Bayes
2024-11-24 12:50:39,467:INFO:Total runtime is 0.10507773558298747 minutes
2024-11-24 12:50:39,470:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:39,470:INFO:Initializing create_model()
2024-11-24 12:50:39,470:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:39,470:INFO:Checking exceptions
2024-11-24 12:50:39,470:INFO:Importing libraries
2024-11-24 12:50:39,470:INFO:Copying training dataset
2024-11-24 12:50:39,473:INFO:Defining folds
2024-11-24 12:50:39,473:INFO:Declaring metric variables
2024-11-24 12:50:39,475:INFO:Importing untrained model
2024-11-24 12:50:39,478:INFO:Naive Bayes Imported successfully
2024-11-24 12:50:39,482:INFO:Starting cross validation
2024-11-24 12:50:39,485:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:39,658:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,662:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,665:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,678:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,682:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,686:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,686:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,690:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,692:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,692:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,693:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,698:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,700:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,702:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:39,718:INFO:Calculating mean and std
2024-11-24 12:50:39,719:INFO:Creating metrics dataframe
2024-11-24 12:50:39,720:INFO:Uploading results into container
2024-11-24 12:50:39,721:INFO:Uploading model into container now
2024-11-24 12:50:39,722:INFO:_master_model_container: 3
2024-11-24 12:50:39,722:INFO:_display_container: 2
2024-11-24 12:50:39,722:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-24 12:50:39,722:INFO:create_model() successfully completed......................................
2024-11-24 12:50:39,799:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:39,799:INFO:Creating metrics dataframe
2024-11-24 12:50:39,805:INFO:Initializing Decision Tree Classifier
2024-11-24 12:50:39,805:INFO:Total runtime is 0.1107084592183431 minutes
2024-11-24 12:50:39,808:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:39,808:INFO:Initializing create_model()
2024-11-24 12:50:39,808:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:39,808:INFO:Checking exceptions
2024-11-24 12:50:39,809:INFO:Importing libraries
2024-11-24 12:50:39,809:INFO:Copying training dataset
2024-11-24 12:50:39,812:INFO:Defining folds
2024-11-24 12:50:39,812:INFO:Declaring metric variables
2024-11-24 12:50:39,815:INFO:Importing untrained model
2024-11-24 12:50:39,818:INFO:Decision Tree Classifier Imported successfully
2024-11-24 12:50:39,824:INFO:Starting cross validation
2024-11-24 12:50:39,826:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:40,020:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,023:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,026:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,027:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,029:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,030:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,031:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,031:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,034:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,034:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,034:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,036:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,037:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,040:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,045:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,046:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,047:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,048:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,048:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,049:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,049:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,050:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,050:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,052:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,052:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,055:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,059:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,061:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,063:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,074:INFO:Calculating mean and std
2024-11-24 12:50:40,075:INFO:Creating metrics dataframe
2024-11-24 12:50:40,076:INFO:Uploading results into container
2024-11-24 12:50:40,077:INFO:Uploading model into container now
2024-11-24 12:50:40,077:INFO:_master_model_container: 4
2024-11-24 12:50:40,077:INFO:_display_container: 2
2024-11-24 12:50:40,078:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-24 12:50:40,078:INFO:create_model() successfully completed......................................
2024-11-24 12:50:40,152:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:40,153:INFO:Creating metrics dataframe
2024-11-24 12:50:40,158:INFO:Initializing SVM - Linear Kernel
2024-11-24 12:50:40,158:INFO:Total runtime is 0.11660101413726807 minutes
2024-11-24 12:50:40,160:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:40,160:INFO:Initializing create_model()
2024-11-24 12:50:40,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:40,160:INFO:Checking exceptions
2024-11-24 12:50:40,160:INFO:Importing libraries
2024-11-24 12:50:40,161:INFO:Copying training dataset
2024-11-24 12:50:40,163:INFO:Defining folds
2024-11-24 12:50:40,163:INFO:Declaring metric variables
2024-11-24 12:50:40,165:INFO:Importing untrained model
2024-11-24 12:50:40,168:INFO:SVM - Linear Kernel Imported successfully
2024-11-24 12:50:40,173:INFO:Starting cross validation
2024-11-24 12:50:40,175:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:40,354:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,359:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,362:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,362:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,365:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,367:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,368:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,369:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,369:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,371:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,371:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,373:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,373:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,374:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,376:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:40,376:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,376:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,378:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,379:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,379:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,380:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,382:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,383:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,384:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,385:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,386:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,386:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,388:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,388:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,390:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,392:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,398:INFO:Calculating mean and std
2024-11-24 12:50:40,399:INFO:Creating metrics dataframe
2024-11-24 12:50:40,401:INFO:Uploading results into container
2024-11-24 12:50:40,401:INFO:Uploading model into container now
2024-11-24 12:50:40,401:INFO:_master_model_container: 5
2024-11-24 12:50:40,402:INFO:_display_container: 2
2024-11-24 12:50:40,402:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-24 12:50:40,402:INFO:create_model() successfully completed......................................
2024-11-24 12:50:40,480:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:40,480:INFO:Creating metrics dataframe
2024-11-24 12:50:40,486:INFO:Initializing Ridge Classifier
2024-11-24 12:50:40,486:INFO:Total runtime is 0.12206718524297079 minutes
2024-11-24 12:50:40,488:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:40,488:INFO:Initializing create_model()
2024-11-24 12:50:40,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:40,489:INFO:Checking exceptions
2024-11-24 12:50:40,489:INFO:Importing libraries
2024-11-24 12:50:40,489:INFO:Copying training dataset
2024-11-24 12:50:40,493:INFO:Defining folds
2024-11-24 12:50:40,493:INFO:Declaring metric variables
2024-11-24 12:50:40,497:INFO:Importing untrained model
2024-11-24 12:50:40,500:INFO:Ridge Classifier Imported successfully
2024-11-24 12:50:40,506:INFO:Starting cross validation
2024-11-24 12:50:40,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:40,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,686:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,690:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,697:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,697:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,699:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,700:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,702:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,704:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,705:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,705:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,707:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,709:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,711:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,711:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,712:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,713:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,714:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,715:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,716:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,718:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,718:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,720:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,720:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,722:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,727:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,729:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,731:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:40,737:INFO:Calculating mean and std
2024-11-24 12:50:40,737:INFO:Creating metrics dataframe
2024-11-24 12:50:40,739:INFO:Uploading results into container
2024-11-24 12:50:40,740:INFO:Uploading model into container now
2024-11-24 12:50:40,740:INFO:_master_model_container: 6
2024-11-24 12:50:40,740:INFO:_display_container: 2
2024-11-24 12:50:40,741:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-24 12:50:40,741:INFO:create_model() successfully completed......................................
2024-11-24 12:50:40,819:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:40,819:INFO:Creating metrics dataframe
2024-11-24 12:50:40,824:INFO:Initializing Random Forest Classifier
2024-11-24 12:50:40,825:INFO:Total runtime is 0.12771728833516438 minutes
2024-11-24 12:50:40,827:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:40,827:INFO:Initializing create_model()
2024-11-24 12:50:40,827:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:40,827:INFO:Checking exceptions
2024-11-24 12:50:40,827:INFO:Importing libraries
2024-11-24 12:50:40,827:INFO:Copying training dataset
2024-11-24 12:50:40,831:INFO:Defining folds
2024-11-24 12:50:40,831:INFO:Declaring metric variables
2024-11-24 12:50:40,833:INFO:Importing untrained model
2024-11-24 12:50:40,835:INFO:Random Forest Classifier Imported successfully
2024-11-24 12:50:40,840:INFO:Starting cross validation
2024-11-24 12:50:40,841:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:41,329:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,330:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,331:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,332:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,333:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,334:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,336:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,336:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,337:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,344:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,344:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,345:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,345:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,345:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,347:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,347:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,348:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,348:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,349:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,349:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,351:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,351:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,352:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,353:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,353:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,353:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,354:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,373:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,376:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,378:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,385:INFO:Calculating mean and std
2024-11-24 12:50:41,386:INFO:Creating metrics dataframe
2024-11-24 12:50:41,387:INFO:Uploading results into container
2024-11-24 12:50:41,388:INFO:Uploading model into container now
2024-11-24 12:50:41,388:INFO:_master_model_container: 7
2024-11-24 12:50:41,388:INFO:_display_container: 2
2024-11-24 12:50:41,389:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 12:50:41,389:INFO:create_model() successfully completed......................................
2024-11-24 12:50:41,468:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:41,468:INFO:Creating metrics dataframe
2024-11-24 12:50:41,475:INFO:Initializing Quadratic Discriminant Analysis
2024-11-24 12:50:41,475:INFO:Total runtime is 0.13855243921279906 minutes
2024-11-24 12:50:41,477:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:41,477:INFO:Initializing create_model()
2024-11-24 12:50:41,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:41,478:INFO:Checking exceptions
2024-11-24 12:50:41,478:INFO:Importing libraries
2024-11-24 12:50:41,478:INFO:Copying training dataset
2024-11-24 12:50:41,482:INFO:Defining folds
2024-11-24 12:50:41,482:INFO:Declaring metric variables
2024-11-24 12:50:41,484:INFO:Importing untrained model
2024-11-24 12:50:41,486:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-24 12:50:41,492:INFO:Starting cross validation
2024-11-24 12:50:41,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:41,679:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,679:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,682:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,684:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,690:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,692:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,695:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,696:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,696:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,697:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,697:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,698:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,698:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,698:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,699:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,699:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,702:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,702:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,706:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,708:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,710:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:41,724:INFO:Calculating mean and std
2024-11-24 12:50:41,724:INFO:Creating metrics dataframe
2024-11-24 12:50:41,727:INFO:Uploading results into container
2024-11-24 12:50:41,727:INFO:Uploading model into container now
2024-11-24 12:50:41,728:INFO:_master_model_container: 8
2024-11-24 12:50:41,728:INFO:_display_container: 2
2024-11-24 12:50:41,728:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-24 12:50:41,728:INFO:create_model() successfully completed......................................
2024-11-24 12:50:41,809:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:41,810:INFO:Creating metrics dataframe
2024-11-24 12:50:41,816:INFO:Initializing Ada Boost Classifier
2024-11-24 12:50:41,816:INFO:Total runtime is 0.1442249536514282 minutes
2024-11-24 12:50:41,819:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:41,819:INFO:Initializing create_model()
2024-11-24 12:50:41,819:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:41,819:INFO:Checking exceptions
2024-11-24 12:50:41,819:INFO:Importing libraries
2024-11-24 12:50:41,819:INFO:Copying training dataset
2024-11-24 12:50:41,822:INFO:Defining folds
2024-11-24 12:50:41,822:INFO:Declaring metric variables
2024-11-24 12:50:41,825:INFO:Importing untrained model
2024-11-24 12:50:41,827:INFO:Ada Boost Classifier Imported successfully
2024-11-24 12:50:41,833:INFO:Starting cross validation
2024-11-24 12:50:41,835:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:41,980:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,987:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,988:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,991:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,993:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,996:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,999:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:41,999:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:42,007:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:42,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 12:50:42,136:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,140:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,143:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,155:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,157:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,159:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,161:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,162:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,162:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,164:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,165:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,168:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,174:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,175:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,178:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,179:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,181:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,181:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,182:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,184:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,186:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,187:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,188:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,189:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,190:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,192:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,193:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,216:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,219:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,223:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,234:INFO:Calculating mean and std
2024-11-24 12:50:42,235:INFO:Creating metrics dataframe
2024-11-24 12:50:42,238:INFO:Uploading results into container
2024-11-24 12:50:42,239:INFO:Uploading model into container now
2024-11-24 12:50:42,239:INFO:_master_model_container: 9
2024-11-24 12:50:42,239:INFO:_display_container: 2
2024-11-24 12:50:42,240:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-24 12:50:42,240:INFO:create_model() successfully completed......................................
2024-11-24 12:50:42,325:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:42,325:INFO:Creating metrics dataframe
2024-11-24 12:50:42,332:INFO:Initializing Gradient Boosting Classifier
2024-11-24 12:50:42,332:INFO:Total runtime is 0.15282564163208007 minutes
2024-11-24 12:50:42,334:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:42,334:INFO:Initializing create_model()
2024-11-24 12:50:42,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:42,334:INFO:Checking exceptions
2024-11-24 12:50:42,334:INFO:Importing libraries
2024-11-24 12:50:42,334:INFO:Copying training dataset
2024-11-24 12:50:42,337:INFO:Defining folds
2024-11-24 12:50:42,337:INFO:Declaring metric variables
2024-11-24 12:50:42,339:INFO:Importing untrained model
2024-11-24 12:50:42,343:INFO:Gradient Boosting Classifier Imported successfully
2024-11-24 12:50:42,348:INFO:Starting cross validation
2024-11-24 12:50:42,350:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:42,637:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,639:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,642:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,652:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,654:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,655:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,656:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,659:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,660:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,661:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,664:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,666:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,666:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,668:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,670:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,671:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,674:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,676:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,676:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,678:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,679:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,680:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,681:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,681:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,682:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,682:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,684:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:42,697:INFO:Calculating mean and std
2024-11-24 12:50:42,697:INFO:Creating metrics dataframe
2024-11-24 12:50:42,701:INFO:Uploading results into container
2024-11-24 12:50:42,701:INFO:Uploading model into container now
2024-11-24 12:50:42,702:INFO:_master_model_container: 10
2024-11-24 12:50:42,702:INFO:_display_container: 2
2024-11-24 12:50:42,702:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-24 12:50:42,702:INFO:create_model() successfully completed......................................
2024-11-24 12:50:42,791:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:42,791:INFO:Creating metrics dataframe
2024-11-24 12:50:42,801:INFO:Initializing Linear Discriminant Analysis
2024-11-24 12:50:42,801:INFO:Total runtime is 0.16065088907877603 minutes
2024-11-24 12:50:42,804:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:42,805:INFO:Initializing create_model()
2024-11-24 12:50:42,805:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:42,805:INFO:Checking exceptions
2024-11-24 12:50:42,805:INFO:Importing libraries
2024-11-24 12:50:42,806:INFO:Copying training dataset
2024-11-24 12:50:42,809:INFO:Defining folds
2024-11-24 12:50:42,809:INFO:Declaring metric variables
2024-11-24 12:50:42,813:INFO:Importing untrained model
2024-11-24 12:50:42,816:INFO:Linear Discriminant Analysis Imported successfully
2024-11-24 12:50:42,822:INFO:Starting cross validation
2024-11-24 12:50:42,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:43,032:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,033:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,036:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,036:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,038:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,039:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,040:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,044:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,048:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,049:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,051:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,055:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,059:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,063:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,066:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,068:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,069:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,071:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,072:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,072:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,074:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,075:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,076:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,078:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,094:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,096:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,099:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,105:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,108:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,110:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,128:INFO:Calculating mean and std
2024-11-24 12:50:43,128:INFO:Creating metrics dataframe
2024-11-24 12:50:43,132:INFO:Uploading results into container
2024-11-24 12:50:43,132:INFO:Uploading model into container now
2024-11-24 12:50:43,132:INFO:_master_model_container: 11
2024-11-24 12:50:43,132:INFO:_display_container: 2
2024-11-24 12:50:43,133:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-24 12:50:43,133:INFO:create_model() successfully completed......................................
2024-11-24 12:50:43,213:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:43,213:INFO:Creating metrics dataframe
2024-11-24 12:50:43,220:INFO:Initializing Extra Trees Classifier
2024-11-24 12:50:43,220:INFO:Total runtime is 0.1676250656445821 minutes
2024-11-24 12:50:43,222:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:43,223:INFO:Initializing create_model()
2024-11-24 12:50:43,223:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:43,223:INFO:Checking exceptions
2024-11-24 12:50:43,223:INFO:Importing libraries
2024-11-24 12:50:43,223:INFO:Copying training dataset
2024-11-24 12:50:43,227:INFO:Defining folds
2024-11-24 12:50:43,227:INFO:Declaring metric variables
2024-11-24 12:50:43,229:INFO:Importing untrained model
2024-11-24 12:50:43,232:INFO:Extra Trees Classifier Imported successfully
2024-11-24 12:50:43,239:INFO:Starting cross validation
2024-11-24 12:50:43,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:43,625:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,628:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,632:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,657:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,657:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,659:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,660:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,662:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,662:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,672:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,672:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,672:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,674:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,675:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,675:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,677:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,677:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,686:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,689:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,702:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,703:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,705:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,716:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,718:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,721:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:43,729:INFO:Calculating mean and std
2024-11-24 12:50:43,729:INFO:Creating metrics dataframe
2024-11-24 12:50:43,731:INFO:Uploading results into container
2024-11-24 12:50:43,732:INFO:Uploading model into container now
2024-11-24 12:50:43,732:INFO:_master_model_container: 12
2024-11-24 12:50:43,732:INFO:_display_container: 2
2024-11-24 12:50:43,733:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-24 12:50:43,733:INFO:create_model() successfully completed......................................
2024-11-24 12:50:43,810:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:43,810:INFO:Creating metrics dataframe
2024-11-24 12:50:43,817:INFO:Initializing Light Gradient Boosting Machine
2024-11-24 12:50:43,818:INFO:Total runtime is 0.17759212652842202 minutes
2024-11-24 12:50:43,820:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:43,820:INFO:Initializing create_model()
2024-11-24 12:50:43,820:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:43,820:INFO:Checking exceptions
2024-11-24 12:50:43,820:INFO:Importing libraries
2024-11-24 12:50:43,820:INFO:Copying training dataset
2024-11-24 12:50:43,823:INFO:Defining folds
2024-11-24 12:50:43,823:INFO:Declaring metric variables
2024-11-24 12:50:43,826:INFO:Importing untrained model
2024-11-24 12:50:43,828:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-24 12:50:43,833:INFO:Starting cross validation
2024-11-24 12:50:43,834:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:44,298:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,299:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,300:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,302:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,302:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,304:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,310:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,313:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,316:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,317:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,320:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,323:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,324:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,327:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,328:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,330:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,330:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,333:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,381:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,383:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,384:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,386:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,387:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,388:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,399:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,401:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,402:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,403:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,403:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,407:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,420:INFO:Calculating mean and std
2024-11-24 12:50:44,421:INFO:Creating metrics dataframe
2024-11-24 12:50:44,423:INFO:Uploading results into container
2024-11-24 12:50:44,423:INFO:Uploading model into container now
2024-11-24 12:50:44,424:INFO:_master_model_container: 13
2024-11-24 12:50:44,424:INFO:_display_container: 2
2024-11-24 12:50:44,424:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-24 12:50:44,425:INFO:create_model() successfully completed......................................
2024-11-24 12:50:44,521:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:44,521:INFO:Creating metrics dataframe
2024-11-24 12:50:44,529:INFO:Initializing Dummy Classifier
2024-11-24 12:50:44,530:INFO:Total runtime is 0.1894588271776835 minutes
2024-11-24 12:50:44,533:INFO:SubProcess create_model() called ==================================
2024-11-24 12:50:44,533:INFO:Initializing create_model()
2024-11-24 12:50:44,533:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000228046E6520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:44,533:INFO:Checking exceptions
2024-11-24 12:50:44,533:INFO:Importing libraries
2024-11-24 12:50:44,533:INFO:Copying training dataset
2024-11-24 12:50:44,537:INFO:Defining folds
2024-11-24 12:50:44,537:INFO:Declaring metric variables
2024-11-24 12:50:44,540:INFO:Importing untrained model
2024-11-24 12:50:44,543:INFO:Dummy Classifier Imported successfully
2024-11-24 12:50:44,548:INFO:Starting cross validation
2024-11-24 12:50:44,550:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 12:50:44,727:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,727:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,730:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,730:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,732:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,732:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,732:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,733:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,733:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,734:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,734:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,736:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,737:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,738:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,739:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,740:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,743:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,745:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,747:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,747:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,748:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,748:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,748:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,749:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,750:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,750:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,751:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,752:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,755:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,756:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,757:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,758:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,758:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,759:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,759:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,759:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,759:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,760:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,761:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 12:50:44,762:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 12:50:44,775:INFO:Calculating mean and std
2024-11-24 12:50:44,776:INFO:Creating metrics dataframe
2024-11-24 12:50:44,778:INFO:Uploading results into container
2024-11-24 12:50:44,778:INFO:Uploading model into container now
2024-11-24 12:50:44,778:INFO:_master_model_container: 14
2024-11-24 12:50:44,778:INFO:_display_container: 2
2024-11-24 12:50:44,779:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-24 12:50:44,779:INFO:create_model() successfully completed......................................
2024-11-24 12:50:44,855:INFO:SubProcess create_model() end ==================================
2024-11-24 12:50:44,856:INFO:Creating metrics dataframe
2024-11-24 12:50:44,865:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-24 12:50:44,870:INFO:Initializing create_model()
2024-11-24 12:50:44,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022836DDBE80>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 12:50:44,871:INFO:Checking exceptions
2024-11-24 12:50:44,872:INFO:Importing libraries
2024-11-24 12:50:44,872:INFO:Copying training dataset
2024-11-24 12:50:44,874:INFO:Defining folds
2024-11-24 12:50:44,874:INFO:Declaring metric variables
2024-11-24 12:50:44,875:INFO:Importing untrained model
2024-11-24 12:50:44,875:INFO:Declaring custom model
2024-11-24 12:50:44,875:INFO:Random Forest Classifier Imported successfully
2024-11-24 12:50:44,876:INFO:Cross validation set to False
2024-11-24 12:50:44,876:INFO:Fitting Model
2024-11-24 12:50:45,069:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 12:50:45,069:INFO:create_model() successfully completed......................................
2024-11-24 12:50:45,166:INFO:_master_model_container: 14
2024-11-24 12:50:45,167:INFO:_display_container: 2
2024-11-24 12:50:45,167:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 12:50:45,167:INFO:compare_models() successfully completed......................................
2024-11-24 16:54:47,529:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 16:54:47,531:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 16:54:47,531:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 16:54:47,531:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 16:54:48,203:INFO:PyCaret ClassificationExperiment
2024-11-24 16:54:48,203:INFO:Logging name: clf-default-name
2024-11-24 16:54:48,203:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-24 16:54:48,203:INFO:version 3.3.2
2024-11-24 16:54:48,203:INFO:Initializing setup()
2024-11-24 16:54:48,203:INFO:self.USI: ce12
2024-11-24 16:54:48,203:INFO:self._variable_keys: {'fold_groups_param', 'n_jobs_param', 'exp_name_log', 'is_multiclass', '_available_plots', 'X_test', 'y_train', 'exp_id', 'log_plots_param', 'X', 'target_param', 'seed', 'fix_imbalance', 'pipeline', 'gpu_n_jobs_param', '_ml_usecase', 'y_test', 'logging_param', 'fold_generator', 'fold_shuffle_param', 'memory', 'html_param', 'USI', 'X_train', 'gpu_param', 'y', 'idx', 'data'}
2024-11-24 16:54:48,203:INFO:Checking environment
2024-11-24 16:54:48,204:INFO:python_version: 3.9.20
2024-11-24 16:54:48,204:INFO:python_build: ('main', 'Oct  3 2024 07:38:01')
2024-11-24 16:54:48,204:INFO:machine: AMD64
2024-11-24 16:54:48,204:INFO:platform: Windows-10-10.0.22621-SP0
2024-11-24 16:54:48,208:INFO:Memory: svmem(total=34266886144, available=24799703040, percent=27.6, used=9467183104, free=24799703040)
2024-11-24 16:54:48,208:INFO:Physical Core: 6
2024-11-24 16:54:48,208:INFO:Logical Core: 12
2024-11-24 16:54:48,208:INFO:Checking libraries
2024-11-24 16:54:48,208:INFO:System:
2024-11-24 16:54:48,208:INFO:    python: 3.9.20 (main, Oct  3 2024, 07:38:01) [MSC v.1929 64 bit (AMD64)]
2024-11-24 16:54:48,208:INFO:executable: c:\Users\trepa\anaconda3\envs\mlops_course\python.exe
2024-11-24 16:54:48,208:INFO:   machine: Windows-10-10.0.22621-SP0
2024-11-24 16:54:48,208:INFO:PyCaret required dependencies:
2024-11-24 16:54:48,236:INFO:                 pip: 24.2
2024-11-24 16:54:48,236:INFO:          setuptools: 75.1.0
2024-11-24 16:54:48,236:INFO:             pycaret: 3.3.2
2024-11-24 16:54:48,236:INFO:             IPython: 8.18.1
2024-11-24 16:54:48,236:INFO:          ipywidgets: 8.1.5
2024-11-24 16:54:48,236:INFO:                tqdm: 4.67.0
2024-11-24 16:54:48,236:INFO:               numpy: 1.26.4
2024-11-24 16:54:48,236:INFO:              pandas: 2.1.4
2024-11-24 16:54:48,236:INFO:              jinja2: 3.1.4
2024-11-24 16:54:48,236:INFO:               scipy: 1.11.4
2024-11-24 16:54:48,236:INFO:              joblib: 1.3.2
2024-11-24 16:54:48,236:INFO:             sklearn: 1.4.2
2024-11-24 16:54:48,236:INFO:                pyod: 2.0.2
2024-11-24 16:54:48,236:INFO:            imblearn: 0.12.4
2024-11-24 16:54:48,236:INFO:   category_encoders: 2.6.4
2024-11-24 16:54:48,236:INFO:            lightgbm: 4.5.0
2024-11-24 16:54:48,236:INFO:               numba: 0.60.0
2024-11-24 16:54:48,236:INFO:            requests: 2.32.3
2024-11-24 16:54:48,236:INFO:          matplotlib: 3.7.5
2024-11-24 16:54:48,236:INFO:          scikitplot: 0.3.7
2024-11-24 16:54:48,236:INFO:         yellowbrick: 1.5
2024-11-24 16:54:48,236:INFO:              plotly: 5.24.1
2024-11-24 16:54:48,236:INFO:    plotly-resampler: Not installed
2024-11-24 16:54:48,236:INFO:             kaleido: 0.2.1
2024-11-24 16:54:48,236:INFO:           schemdraw: 0.15
2024-11-24 16:54:48,236:INFO:         statsmodels: 0.14.4
2024-11-24 16:54:48,236:INFO:              sktime: 0.26.0
2024-11-24 16:54:48,236:INFO:               tbats: 1.1.3
2024-11-24 16:54:48,236:INFO:            pmdarima: 2.0.4
2024-11-24 16:54:48,236:INFO:              psutil: 6.1.0
2024-11-24 16:54:48,236:INFO:          markupsafe: 3.0.2
2024-11-24 16:54:48,236:INFO:             pickle5: Not installed
2024-11-24 16:54:48,236:INFO:         cloudpickle: 3.1.0
2024-11-24 16:54:48,236:INFO:         deprecation: 2.1.0
2024-11-24 16:54:48,236:INFO:              xxhash: 3.5.0
2024-11-24 16:54:48,236:INFO:           wurlitzer: Not installed
2024-11-24 16:54:48,237:INFO:PyCaret optional dependencies:
2024-11-24 16:54:48,249:INFO:                shap: Not installed
2024-11-24 16:54:48,249:INFO:           interpret: Not installed
2024-11-24 16:54:48,249:INFO:                umap: Not installed
2024-11-24 16:54:48,249:INFO:     ydata_profiling: Not installed
2024-11-24 16:54:48,249:INFO:  explainerdashboard: Not installed
2024-11-24 16:54:48,249:INFO:             autoviz: Not installed
2024-11-24 16:54:48,249:INFO:           fairlearn: Not installed
2024-11-24 16:54:48,249:INFO:          deepchecks: Not installed
2024-11-24 16:54:48,249:INFO:             xgboost: Not installed
2024-11-24 16:54:48,249:INFO:            catboost: Not installed
2024-11-24 16:54:48,249:INFO:              kmodes: Not installed
2024-11-24 16:54:48,249:INFO:             mlxtend: Not installed
2024-11-24 16:54:48,249:INFO:       statsforecast: Not installed
2024-11-24 16:54:48,249:INFO:        tune_sklearn: Not installed
2024-11-24 16:54:48,249:INFO:                 ray: Not installed
2024-11-24 16:54:48,249:INFO:            hyperopt: Not installed
2024-11-24 16:54:48,249:INFO:              optuna: Not installed
2024-11-24 16:54:48,249:INFO:               skopt: Not installed
2024-11-24 16:54:48,249:INFO:              mlflow: Not installed
2024-11-24 16:54:48,249:INFO:              gradio: Not installed
2024-11-24 16:54:48,249:INFO:             fastapi: Not installed
2024-11-24 16:54:48,250:INFO:             uvicorn: Not installed
2024-11-24 16:54:48,250:INFO:              m2cgen: Not installed
2024-11-24 16:54:48,250:INFO:           evidently: Not installed
2024-11-24 16:54:48,250:INFO:               fugue: Not installed
2024-11-24 16:54:48,250:INFO:           streamlit: Not installed
2024-11-24 16:54:48,250:INFO:             prophet: Not installed
2024-11-24 16:54:48,250:INFO:None
2024-11-24 16:54:48,250:INFO:Set up data.
2024-11-24 16:54:48,264:INFO:Set up folding strategy.
2024-11-24 16:54:48,264:INFO:Set up train/test split.
2024-11-24 16:54:48,276:INFO:Set up index.
2024-11-24 16:54:48,276:INFO:Assigning column types.
2024-11-24 16:54:48,280:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-24 16:54:48,322:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,325:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,359:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,360:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,403:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,404:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,432:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-24 16:54:48,475:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,502:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,546:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 16:54:48,573:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,573:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-24 16:54:48,644:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,716:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,716:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:48,718:INFO:Preparing preprocessing pipeline...
2024-11-24 16:54:48,726:INFO:Set up label encoding.
2024-11-24 16:54:48,726:INFO:Set up simple imputation.
2024-11-24 16:54:48,731:INFO:Set up encoding of ordinal features.
2024-11-24 16:54:48,742:INFO:Set up encoding of categorical features.
2024-11-24 16:54:48,742:INFO:Set up column name cleaning.
2024-11-24 16:54:48,946:INFO:Finished creating preprocessing pipeline.
2024-11-24 16:54:49,038:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\trepa\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                         'mapping': No                   0
Yes                  1
NaN                 -1
dtype: int64},
                                                                        {'col': 'Alopecia ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No           0
Yes          1
NaN         -1
dtype: int64},
                                                                        {'col': 'Obesity ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No          0
Yes         1
NaN        -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-24 16:54:49,038:INFO:Creating final display dataframe.
2024-11-24 16:54:49,350:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target                     class
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                 (520, 17)
5        Transformed data shape                 (520, 17)
6   Transformed train set shape                 (364, 17)
7    Transformed test set shape                 (156, 17)
8              Numeric features                         1
9          Categorical features                        15
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      ce12
2024-11-24 16:54:49,434:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:49,435:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:49,507:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:49,507:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 16:54:49,508:INFO:setup() successfully completed in 1.31s...............
2024-11-24 16:54:58,329:INFO:Initializing compare_models()
2024-11-24 16:54:58,329:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-24 16:54:58,329:INFO:Checking exceptions
2024-11-24 16:54:58,332:INFO:Preparing display monitor
2024-11-24 16:54:58,357:INFO:Initializing Logistic Regression
2024-11-24 16:54:58,358:INFO:Total runtime is 1.7098585764567058e-05 minutes
2024-11-24 16:54:58,362:INFO:SubProcess create_model() called ==================================
2024-11-24 16:54:58,362:INFO:Initializing create_model()
2024-11-24 16:54:58,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:54:58,363:INFO:Checking exceptions
2024-11-24 16:54:58,363:INFO:Importing libraries
2024-11-24 16:54:58,363:INFO:Copying training dataset
2024-11-24 16:54:58,366:INFO:Defining folds
2024-11-24 16:54:58,366:INFO:Declaring metric variables
2024-11-24 16:54:58,370:INFO:Importing untrained model
2024-11-24 16:54:58,375:INFO:Logistic Regression Imported successfully
2024-11-24 16:54:58,381:INFO:Starting cross validation
2024-11-24 16:54:58,382:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:02,182:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,188:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,191:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,210:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,212:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,215:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,225:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,232:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,235:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,247:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,252:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,255:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,256:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,257:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,260:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,271:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,273:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,276:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,279:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,279:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,282:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,282:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,282:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,285:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,286:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,286:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,289:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,294:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,298:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,301:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,320:INFO:Calculating mean and std
2024-11-24 16:55:02,322:INFO:Creating metrics dataframe
2024-11-24 16:55:02,324:INFO:Uploading results into container
2024-11-24 16:55:02,324:INFO:Uploading model into container now
2024-11-24 16:55:02,326:INFO:_master_model_container: 1
2024-11-24 16:55:02,326:INFO:_display_container: 2
2024-11-24 16:55:02,326:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-24 16:55:02,326:INFO:create_model() successfully completed......................................
2024-11-24 16:55:02,401:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:02,401:INFO:Creating metrics dataframe
2024-11-24 16:55:02,406:INFO:Initializing K Neighbors Classifier
2024-11-24 16:55:02,406:INFO:Total runtime is 0.06748895645141602 minutes
2024-11-24 16:55:02,408:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:02,408:INFO:Initializing create_model()
2024-11-24 16:55:02,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:02,409:INFO:Checking exceptions
2024-11-24 16:55:02,409:INFO:Importing libraries
2024-11-24 16:55:02,409:INFO:Copying training dataset
2024-11-24 16:55:02,412:INFO:Defining folds
2024-11-24 16:55:02,412:INFO:Declaring metric variables
2024-11-24 16:55:02,415:INFO:Importing untrained model
2024-11-24 16:55:02,418:INFO:K Neighbors Classifier Imported successfully
2024-11-24 16:55:02,423:INFO:Starting cross validation
2024-11-24 16:55:02,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:02,746:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,747:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,747:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,750:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,750:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,750:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,753:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,753:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,754:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,754:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,754:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,757:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,758:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,759:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,761:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,761:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,763:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,764:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,767:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,767:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,767:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,769:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,769:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:02,771:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,560:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,563:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,564:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,566:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,569:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,571:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,576:INFO:Calculating mean and std
2024-11-24 16:55:04,577:INFO:Creating metrics dataframe
2024-11-24 16:55:04,579:INFO:Uploading results into container
2024-11-24 16:55:04,580:INFO:Uploading model into container now
2024-11-24 16:55:04,580:INFO:_master_model_container: 2
2024-11-24 16:55:04,580:INFO:_display_container: 2
2024-11-24 16:55:04,580:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-24 16:55:04,580:INFO:create_model() successfully completed......................................
2024-11-24 16:55:04,646:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:04,646:INFO:Creating metrics dataframe
2024-11-24 16:55:04,651:INFO:Initializing Naive Bayes
2024-11-24 16:55:04,652:INFO:Total runtime is 0.10490874449412028 minutes
2024-11-24 16:55:04,654:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:04,655:INFO:Initializing create_model()
2024-11-24 16:55:04,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:04,655:INFO:Checking exceptions
2024-11-24 16:55:04,655:INFO:Importing libraries
2024-11-24 16:55:04,655:INFO:Copying training dataset
2024-11-24 16:55:04,658:INFO:Defining folds
2024-11-24 16:55:04,658:INFO:Declaring metric variables
2024-11-24 16:55:04,660:INFO:Importing untrained model
2024-11-24 16:55:04,662:INFO:Naive Bayes Imported successfully
2024-11-24 16:55:04,667:INFO:Starting cross validation
2024-11-24 16:55:04,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:04,867:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,870:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,870:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,872:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,872:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,872:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,873:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,873:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,876:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,876:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,877:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,878:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,879:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,880:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,880:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,882:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,885:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,887:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,890:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,890:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,891:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,892:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,893:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,894:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,894:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,894:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,895:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,896:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,897:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:04,902:INFO:Calculating mean and std
2024-11-24 16:55:04,903:INFO:Creating metrics dataframe
2024-11-24 16:55:04,904:INFO:Uploading results into container
2024-11-24 16:55:04,905:INFO:Uploading model into container now
2024-11-24 16:55:04,906:INFO:_master_model_container: 3
2024-11-24 16:55:04,906:INFO:_display_container: 2
2024-11-24 16:55:04,906:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-24 16:55:04,906:INFO:create_model() successfully completed......................................
2024-11-24 16:55:04,966:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:04,967:INFO:Creating metrics dataframe
2024-11-24 16:55:04,973:INFO:Initializing Decision Tree Classifier
2024-11-24 16:55:04,973:INFO:Total runtime is 0.11025835673014324 minutes
2024-11-24 16:55:04,975:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:04,975:INFO:Initializing create_model()
2024-11-24 16:55:04,975:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:04,975:INFO:Checking exceptions
2024-11-24 16:55:04,975:INFO:Importing libraries
2024-11-24 16:55:04,975:INFO:Copying training dataset
2024-11-24 16:55:04,978:INFO:Defining folds
2024-11-24 16:55:04,978:INFO:Declaring metric variables
2024-11-24 16:55:04,980:INFO:Importing untrained model
2024-11-24 16:55:04,983:INFO:Decision Tree Classifier Imported successfully
2024-11-24 16:55:04,988:INFO:Starting cross validation
2024-11-24 16:55:04,990:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:05,187:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,187:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,189:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,190:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,191:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,192:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,193:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,193:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,194:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,195:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,196:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,196:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,197:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,198:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,198:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,199:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,201:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,203:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,204:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,206:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,207:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,207:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,208:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,209:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,210:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,211:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,213:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,214:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,217:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,219:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,227:INFO:Calculating mean and std
2024-11-24 16:55:05,228:INFO:Creating metrics dataframe
2024-11-24 16:55:05,230:INFO:Uploading results into container
2024-11-24 16:55:05,230:INFO:Uploading model into container now
2024-11-24 16:55:05,231:INFO:_master_model_container: 4
2024-11-24 16:55:05,231:INFO:_display_container: 2
2024-11-24 16:55:05,232:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-24 16:55:05,232:INFO:create_model() successfully completed......................................
2024-11-24 16:55:05,292:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:05,292:INFO:Creating metrics dataframe
2024-11-24 16:55:05,298:INFO:Initializing SVM - Linear Kernel
2024-11-24 16:55:05,298:INFO:Total runtime is 0.11568973064422608 minutes
2024-11-24 16:55:05,302:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:05,303:INFO:Initializing create_model()
2024-11-24 16:55:05,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:05,303:INFO:Checking exceptions
2024-11-24 16:55:05,303:INFO:Importing libraries
2024-11-24 16:55:05,303:INFO:Copying training dataset
2024-11-24 16:55:05,307:INFO:Defining folds
2024-11-24 16:55:05,308:INFO:Declaring metric variables
2024-11-24 16:55:05,311:INFO:Importing untrained model
2024-11-24 16:55:05,315:INFO:SVM - Linear Kernel Imported successfully
2024-11-24 16:55:05,322:INFO:Starting cross validation
2024-11-24 16:55:05,324:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:05,519:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,522:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,522:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,524:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,524:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,526:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,526:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,527:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,527:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,530:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,530:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,530:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,534:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,534:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,538:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,538:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,540:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,540:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,541:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:05,541:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,542:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,542:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,543:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,544:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,546:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,548:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,550:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,550:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,552:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,552:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,554:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,570:INFO:Calculating mean and std
2024-11-24 16:55:05,571:INFO:Creating metrics dataframe
2024-11-24 16:55:05,573:INFO:Uploading results into container
2024-11-24 16:55:05,573:INFO:Uploading model into container now
2024-11-24 16:55:05,574:INFO:_master_model_container: 5
2024-11-24 16:55:05,574:INFO:_display_container: 2
2024-11-24 16:55:05,574:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-24 16:55:05,574:INFO:create_model() successfully completed......................................
2024-11-24 16:55:05,635:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:05,635:INFO:Creating metrics dataframe
2024-11-24 16:55:05,640:INFO:Initializing Ridge Classifier
2024-11-24 16:55:05,640:INFO:Total runtime is 0.1213781754175822 minutes
2024-11-24 16:55:05,643:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:05,643:INFO:Initializing create_model()
2024-11-24 16:55:05,643:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:05,643:INFO:Checking exceptions
2024-11-24 16:55:05,643:INFO:Importing libraries
2024-11-24 16:55:05,643:INFO:Copying training dataset
2024-11-24 16:55:05,646:INFO:Defining folds
2024-11-24 16:55:05,646:INFO:Declaring metric variables
2024-11-24 16:55:05,649:INFO:Importing untrained model
2024-11-24 16:55:05,652:INFO:Ridge Classifier Imported successfully
2024-11-24 16:55:05,656:INFO:Starting cross validation
2024-11-24 16:55:05,658:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:05,860:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,862:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,863:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,863:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,863:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,864:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,864:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,865:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,867:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,868:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,868:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,870:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,870:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,871:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,871:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,871:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,871:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,872:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,872:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,874:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,874:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,875:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,877:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,878:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:05,897:INFO:Calculating mean and std
2024-11-24 16:55:05,898:INFO:Creating metrics dataframe
2024-11-24 16:55:05,900:INFO:Uploading results into container
2024-11-24 16:55:05,901:INFO:Uploading model into container now
2024-11-24 16:55:05,901:INFO:_master_model_container: 6
2024-11-24 16:55:05,901:INFO:_display_container: 2
2024-11-24 16:55:05,901:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-24 16:55:05,902:INFO:create_model() successfully completed......................................
2024-11-24 16:55:05,963:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:05,963:INFO:Creating metrics dataframe
2024-11-24 16:55:05,970:INFO:Initializing Random Forest Classifier
2024-11-24 16:55:05,970:INFO:Total runtime is 0.12687468926111858 minutes
2024-11-24 16:55:05,972:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:05,972:INFO:Initializing create_model()
2024-11-24 16:55:05,972:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:05,972:INFO:Checking exceptions
2024-11-24 16:55:05,973:INFO:Importing libraries
2024-11-24 16:55:05,973:INFO:Copying training dataset
2024-11-24 16:55:05,976:INFO:Defining folds
2024-11-24 16:55:05,976:INFO:Declaring metric variables
2024-11-24 16:55:05,978:INFO:Importing untrained model
2024-11-24 16:55:05,981:INFO:Random Forest Classifier Imported successfully
2024-11-24 16:55:05,986:INFO:Starting cross validation
2024-11-24 16:55:05,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:06,458:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,458:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,462:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,463:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,465:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,467:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,467:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,467:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,469:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,474:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,476:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,476:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,477:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,479:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,480:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,481:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,481:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,483:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,484:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,484:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,490:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,490:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,491:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,494:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,494:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,494:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,496:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,497:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,497:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,516:INFO:Calculating mean and std
2024-11-24 16:55:06,516:INFO:Creating metrics dataframe
2024-11-24 16:55:06,518:INFO:Uploading results into container
2024-11-24 16:55:06,519:INFO:Uploading model into container now
2024-11-24 16:55:06,519:INFO:_master_model_container: 7
2024-11-24 16:55:06,519:INFO:_display_container: 2
2024-11-24 16:55:06,519:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 16:55:06,520:INFO:create_model() successfully completed......................................
2024-11-24 16:55:06,582:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:06,582:INFO:Creating metrics dataframe
2024-11-24 16:55:06,589:INFO:Initializing Quadratic Discriminant Analysis
2024-11-24 16:55:06,589:INFO:Total runtime is 0.1371915419896444 minutes
2024-11-24 16:55:06,591:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:06,591:INFO:Initializing create_model()
2024-11-24 16:55:06,592:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:06,592:INFO:Checking exceptions
2024-11-24 16:55:06,592:INFO:Importing libraries
2024-11-24 16:55:06,592:INFO:Copying training dataset
2024-11-24 16:55:06,595:INFO:Defining folds
2024-11-24 16:55:06,595:INFO:Declaring metric variables
2024-11-24 16:55:06,597:INFO:Importing untrained model
2024-11-24 16:55:06,600:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-24 16:55:06,604:INFO:Starting cross validation
2024-11-24 16:55:06,607:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:06,807:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,810:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,811:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,811:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,812:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,813:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,814:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,814:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,814:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,816:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,817:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,818:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,818:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,822:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,823:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,825:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,825:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,826:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,826:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,827:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,828:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,828:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,829:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,829:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,831:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,831:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,831:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,834:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,834:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,836:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:06,842:INFO:Calculating mean and std
2024-11-24 16:55:06,843:INFO:Creating metrics dataframe
2024-11-24 16:55:06,844:INFO:Uploading results into container
2024-11-24 16:55:06,845:INFO:Uploading model into container now
2024-11-24 16:55:06,846:INFO:_master_model_container: 8
2024-11-24 16:55:06,846:INFO:_display_container: 2
2024-11-24 16:55:06,846:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-24 16:55:06,846:INFO:create_model() successfully completed......................................
2024-11-24 16:55:06,907:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:06,907:INFO:Creating metrics dataframe
2024-11-24 16:55:06,913:INFO:Initializing Ada Boost Classifier
2024-11-24 16:55:06,913:INFO:Total runtime is 0.14259673357009892 minutes
2024-11-24 16:55:06,916:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:06,916:INFO:Initializing create_model()
2024-11-24 16:55:06,916:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:06,916:INFO:Checking exceptions
2024-11-24 16:55:06,916:INFO:Importing libraries
2024-11-24 16:55:06,916:INFO:Copying training dataset
2024-11-24 16:55:06,920:INFO:Defining folds
2024-11-24 16:55:06,920:INFO:Declaring metric variables
2024-11-24 16:55:06,922:INFO:Importing untrained model
2024-11-24 16:55:06,925:INFO:Ada Boost Classifier Imported successfully
2024-11-24 16:55:06,929:INFO:Starting cross validation
2024-11-24 16:55:06,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:07,070:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,072:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,077:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,079:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,085:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,087:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,091:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,092:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,093:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,094:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 16:55:07,223:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,225:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,226:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,227:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,227:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,233:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,233:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,236:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,238:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,242:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,244:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,245:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,246:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,247:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,249:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,250:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,250:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,250:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,250:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,252:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,252:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,252:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,252:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,254:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,254:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,254:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,255:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,262:INFO:Calculating mean and std
2024-11-24 16:55:07,263:INFO:Creating metrics dataframe
2024-11-24 16:55:07,265:INFO:Uploading results into container
2024-11-24 16:55:07,266:INFO:Uploading model into container now
2024-11-24 16:55:07,266:INFO:_master_model_container: 9
2024-11-24 16:55:07,266:INFO:_display_container: 2
2024-11-24 16:55:07,266:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-24 16:55:07,266:INFO:create_model() successfully completed......................................
2024-11-24 16:55:07,327:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:07,327:INFO:Creating metrics dataframe
2024-11-24 16:55:07,334:INFO:Initializing Gradient Boosting Classifier
2024-11-24 16:55:07,334:INFO:Total runtime is 0.14962243239084883 minutes
2024-11-24 16:55:07,337:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:07,338:INFO:Initializing create_model()
2024-11-24 16:55:07,338:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:07,338:INFO:Checking exceptions
2024-11-24 16:55:07,338:INFO:Importing libraries
2024-11-24 16:55:07,338:INFO:Copying training dataset
2024-11-24 16:55:07,341:INFO:Defining folds
2024-11-24 16:55:07,341:INFO:Declaring metric variables
2024-11-24 16:55:07,344:INFO:Importing untrained model
2024-11-24 16:55:07,346:INFO:Gradient Boosting Classifier Imported successfully
2024-11-24 16:55:07,352:INFO:Starting cross validation
2024-11-24 16:55:07,353:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:07,667:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,670:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,674:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,677:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,679:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,681:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,682:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,683:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,684:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,685:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,686:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,687:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,688:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,688:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,688:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,688:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,690:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,691:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,693:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,693:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,694:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,695:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,695:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,696:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,697:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,698:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,701:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:07,715:INFO:Calculating mean and std
2024-11-24 16:55:07,716:INFO:Creating metrics dataframe
2024-11-24 16:55:07,718:INFO:Uploading results into container
2024-11-24 16:55:07,718:INFO:Uploading model into container now
2024-11-24 16:55:07,719:INFO:_master_model_container: 10
2024-11-24 16:55:07,719:INFO:_display_container: 2
2024-11-24 16:55:07,719:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-24 16:55:07,719:INFO:create_model() successfully completed......................................
2024-11-24 16:55:07,780:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:07,781:INFO:Creating metrics dataframe
2024-11-24 16:55:07,787:INFO:Initializing Linear Discriminant Analysis
2024-11-24 16:55:07,787:INFO:Total runtime is 0.1571648995081584 minutes
2024-11-24 16:55:07,790:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:07,790:INFO:Initializing create_model()
2024-11-24 16:55:07,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:07,790:INFO:Checking exceptions
2024-11-24 16:55:07,790:INFO:Importing libraries
2024-11-24 16:55:07,790:INFO:Copying training dataset
2024-11-24 16:55:07,793:INFO:Defining folds
2024-11-24 16:55:07,793:INFO:Declaring metric variables
2024-11-24 16:55:07,795:INFO:Importing untrained model
2024-11-24 16:55:07,798:INFO:Linear Discriminant Analysis Imported successfully
2024-11-24 16:55:07,803:INFO:Starting cross validation
2024-11-24 16:55:07,804:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:08,002:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,003:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,005:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,005:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,006:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,007:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,008:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,008:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,008:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,009:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,009:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,010:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,010:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,010:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,011:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,012:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,013:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,013:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,013:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,014:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,014:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,015:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,015:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,016:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,017:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,017:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,019:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,024:INFO:Calculating mean and std
2024-11-24 16:55:08,025:INFO:Creating metrics dataframe
2024-11-24 16:55:08,026:INFO:Uploading results into container
2024-11-24 16:55:08,027:INFO:Uploading model into container now
2024-11-24 16:55:08,027:INFO:_master_model_container: 11
2024-11-24 16:55:08,027:INFO:_display_container: 2
2024-11-24 16:55:08,028:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-24 16:55:08,028:INFO:create_model() successfully completed......................................
2024-11-24 16:55:08,089:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:08,090:INFO:Creating metrics dataframe
2024-11-24 16:55:08,096:INFO:Initializing Extra Trees Classifier
2024-11-24 16:55:08,096:INFO:Total runtime is 0.1623114625612895 minutes
2024-11-24 16:55:08,099:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:08,099:INFO:Initializing create_model()
2024-11-24 16:55:08,099:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:08,099:INFO:Checking exceptions
2024-11-24 16:55:08,099:INFO:Importing libraries
2024-11-24 16:55:08,099:INFO:Copying training dataset
2024-11-24 16:55:08,102:INFO:Defining folds
2024-11-24 16:55:08,102:INFO:Declaring metric variables
2024-11-24 16:55:08,104:INFO:Importing untrained model
2024-11-24 16:55:08,107:INFO:Extra Trees Classifier Imported successfully
2024-11-24 16:55:08,112:INFO:Starting cross validation
2024-11-24 16:55:08,114:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:08,512:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,512:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,515:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,516:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,519:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,520:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,526:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,526:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,527:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,529:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,530:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,530:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,534:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,534:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,535:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,541:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,542:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,545:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,545:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,548:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,548:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,556:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,557:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,559:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,559:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,561:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,561:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,571:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,573:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,575:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:08,583:INFO:Calculating mean and std
2024-11-24 16:55:08,585:INFO:Creating metrics dataframe
2024-11-24 16:55:08,587:INFO:Uploading results into container
2024-11-24 16:55:08,588:INFO:Uploading model into container now
2024-11-24 16:55:08,588:INFO:_master_model_container: 12
2024-11-24 16:55:08,588:INFO:_display_container: 2
2024-11-24 16:55:08,589:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-24 16:55:08,589:INFO:create_model() successfully completed......................................
2024-11-24 16:55:08,651:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:08,651:INFO:Creating metrics dataframe
2024-11-24 16:55:08,658:INFO:Initializing Light Gradient Boosting Machine
2024-11-24 16:55:08,658:INFO:Total runtime is 0.1716858744621277 minutes
2024-11-24 16:55:08,660:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:08,661:INFO:Initializing create_model()
2024-11-24 16:55:08,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:08,661:INFO:Checking exceptions
2024-11-24 16:55:08,661:INFO:Importing libraries
2024-11-24 16:55:08,661:INFO:Copying training dataset
2024-11-24 16:55:08,664:INFO:Defining folds
2024-11-24 16:55:08,664:INFO:Declaring metric variables
2024-11-24 16:55:08,666:INFO:Importing untrained model
2024-11-24 16:55:08,669:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-24 16:55:08,673:INFO:Starting cross validation
2024-11-24 16:55:08,675:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:09,173:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,174:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,177:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,178:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,180:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,180:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,186:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,189:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,192:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,193:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,196:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,198:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,218:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,222:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,224:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,243:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,243:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,245:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,246:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,248:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,248:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,257:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,260:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,262:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,266:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,269:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,273:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,306:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,309:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,311:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,329:INFO:Calculating mean and std
2024-11-24 16:55:09,330:INFO:Creating metrics dataframe
2024-11-24 16:55:09,333:INFO:Uploading results into container
2024-11-24 16:55:09,333:INFO:Uploading model into container now
2024-11-24 16:55:09,334:INFO:_master_model_container: 13
2024-11-24 16:55:09,334:INFO:_display_container: 2
2024-11-24 16:55:09,334:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-24 16:55:09,334:INFO:create_model() successfully completed......................................
2024-11-24 16:55:09,408:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:09,408:INFO:Creating metrics dataframe
2024-11-24 16:55:09,416:INFO:Initializing Dummy Classifier
2024-11-24 16:55:09,416:INFO:Total runtime is 0.18431788682937625 minutes
2024-11-24 16:55:09,419:INFO:SubProcess create_model() called ==================================
2024-11-24 16:55:09,419:INFO:Initializing create_model()
2024-11-24 16:55:09,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002ADBBE5A8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:09,419:INFO:Checking exceptions
2024-11-24 16:55:09,419:INFO:Importing libraries
2024-11-24 16:55:09,419:INFO:Copying training dataset
2024-11-24 16:55:09,422:INFO:Defining folds
2024-11-24 16:55:09,422:INFO:Declaring metric variables
2024-11-24 16:55:09,425:INFO:Importing untrained model
2024-11-24 16:55:09,427:INFO:Dummy Classifier Imported successfully
2024-11-24 16:55:09,433:INFO:Starting cross validation
2024-11-24 16:55:09,434:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 16:55:09,622:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,626:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,627:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,629:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,636:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,639:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,640:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,642:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,642:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,646:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,646:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,648:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,649:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,650:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,651:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,653:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,655:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,656:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,658:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,659:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,660:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,660:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,660:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,661:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,662:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,663:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,663:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,664:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,664:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,666:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,666:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,670:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,672:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,672:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,673:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,674:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,674:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,675:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 16:55:09,676:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 16:55:09,686:INFO:Calculating mean and std
2024-11-24 16:55:09,688:INFO:Creating metrics dataframe
2024-11-24 16:55:09,689:INFO:Uploading results into container
2024-11-24 16:55:09,690:INFO:Uploading model into container now
2024-11-24 16:55:09,690:INFO:_master_model_container: 14
2024-11-24 16:55:09,690:INFO:_display_container: 2
2024-11-24 16:55:09,690:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-24 16:55:09,691:INFO:create_model() successfully completed......................................
2024-11-24 16:55:09,752:INFO:SubProcess create_model() end ==================================
2024-11-24 16:55:09,752:INFO:Creating metrics dataframe
2024-11-24 16:55:09,760:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-24 16:55:09,766:INFO:Initializing create_model()
2024-11-24 16:55:09,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 16:55:09,766:INFO:Checking exceptions
2024-11-24 16:55:09,768:INFO:Importing libraries
2024-11-24 16:55:09,768:INFO:Copying training dataset
2024-11-24 16:55:09,771:INFO:Defining folds
2024-11-24 16:55:09,771:INFO:Declaring metric variables
2024-11-24 16:55:09,771:INFO:Importing untrained model
2024-11-24 16:55:09,771:INFO:Declaring custom model
2024-11-24 16:55:09,772:INFO:Random Forest Classifier Imported successfully
2024-11-24 16:55:09,772:INFO:Cross validation set to False
2024-11-24 16:55:09,773:INFO:Fitting Model
2024-11-24 16:55:09,966:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 16:55:09,966:INFO:create_model() successfully completed......................................
2024-11-24 16:55:10,045:INFO:_master_model_container: 14
2024-11-24 16:55:10,046:INFO:_display_container: 2
2024-11-24 16:55:10,046:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 16:55:10,046:INFO:compare_models() successfully completed......................................
2024-11-24 16:58:00,387:INFO:Initializing evaluate_model()
2024-11-24 16:58:00,387:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 16:58:00,410:INFO:Initializing plot_model()
2024-11-24 16:58:00,410:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:58:00,410:INFO:Checking exceptions
2024-11-24 16:58:00,435:INFO:Preloading libraries
2024-11-24 16:58:00,442:INFO:Copying training dataset
2024-11-24 16:58:00,443:INFO:Plot type: pipeline
2024-11-24 16:58:00,615:INFO:Visual Rendered Successfully
2024-11-24 16:58:00,678:INFO:plot_model() successfully completed......................................
2024-11-24 16:58:21,643:INFO:Initializing plot_model()
2024-11-24 16:58:21,643:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:58:21,643:INFO:Checking exceptions
2024-11-24 16:58:21,665:INFO:Preloading libraries
2024-11-24 16:58:21,672:INFO:Copying training dataset
2024-11-24 16:58:21,672:INFO:Plot type: feature_all
2024-11-24 16:58:21,747:WARNING:No coef_ found. Trying feature_importances_
2024-11-24 16:58:21,989:INFO:Visual Rendered Successfully
2024-11-24 16:58:22,051:INFO:plot_model() successfully completed......................................
2024-11-24 16:58:49,674:INFO:Initializing plot_model()
2024-11-24 16:58:49,674:INFO:plot_model(plot=tree, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:58:49,674:INFO:Checking exceptions
2024-11-24 16:58:49,705:INFO:Preloading libraries
2024-11-24 16:58:49,711:INFO:Copying training dataset
2024-11-24 16:58:49,711:INFO:Plot type: tree
2024-11-24 16:58:50,778:INFO:Plotting decision trees
2024-11-24 16:58:50,852:INFO:Plotting tree 0
2024-11-24 16:58:51,230:INFO:Plotting tree 1
2024-11-24 16:58:51,362:INFO:Plotting tree 2
2024-11-24 16:58:51,519:INFO:Plotting tree 3
2024-11-24 16:58:51,610:INFO:Plotting tree 4
2024-11-24 16:58:51,739:INFO:Plotting tree 5
2024-11-24 16:58:51,852:INFO:Plotting tree 6
2024-11-24 16:58:51,973:INFO:Plotting tree 7
2024-11-24 16:58:52,111:INFO:Plotting tree 8
2024-11-24 16:58:52,222:INFO:Plotting tree 9
2024-11-24 16:58:52,321:INFO:Plotting tree 10
2024-11-24 16:58:52,536:INFO:Plotting tree 11
2024-11-24 16:58:52,646:INFO:Plotting tree 12
2024-11-24 16:58:52,745:INFO:Plotting tree 13
2024-11-24 16:58:52,870:INFO:Plotting tree 14
2024-11-24 16:58:53,008:INFO:Plotting tree 15
2024-11-24 16:58:53,110:INFO:Plotting tree 16
2024-11-24 16:58:53,226:INFO:Plotting tree 17
2024-11-24 16:58:53,360:INFO:Plotting tree 18
2024-11-24 16:58:53,476:INFO:Plotting tree 19
2024-11-24 16:58:53,583:INFO:Plotting tree 20
2024-11-24 16:58:53,706:INFO:Plotting tree 21
2024-11-24 16:58:53,823:INFO:Plotting tree 22
2024-11-24 16:58:53,917:INFO:Plotting tree 23
2024-11-24 16:58:54,002:INFO:Plotting tree 24
2024-11-24 16:58:54,101:INFO:Plotting tree 25
2024-11-24 16:58:54,218:INFO:Plotting tree 26
2024-11-24 16:58:54,337:INFO:Plotting tree 27
2024-11-24 16:58:54,439:INFO:Plotting tree 28
2024-11-24 16:58:54,563:INFO:Plotting tree 29
2024-11-24 16:58:54,656:INFO:Plotting tree 30
2024-11-24 16:58:54,781:INFO:Plotting tree 31
2024-11-24 16:58:54,889:INFO:Plotting tree 32
2024-11-24 16:58:54,989:INFO:Plotting tree 33
2024-11-24 16:58:55,102:INFO:Plotting tree 34
2024-11-24 16:58:55,202:INFO:Plotting tree 35
2024-11-24 16:58:55,300:INFO:Plotting tree 36
2024-11-24 16:58:55,535:INFO:Plotting tree 37
2024-11-24 16:58:55,666:INFO:Plotting tree 38
2024-11-24 16:58:55,797:INFO:Plotting tree 39
2024-11-24 16:58:55,916:INFO:Plotting tree 40
2024-11-24 16:58:56,019:INFO:Plotting tree 41
2024-11-24 16:58:56,131:INFO:Plotting tree 42
2024-11-24 16:58:56,255:INFO:Plotting tree 43
2024-11-24 16:58:56,388:INFO:Plotting tree 44
2024-11-24 16:58:56,489:INFO:Plotting tree 45
2024-11-24 16:58:56,581:INFO:Plotting tree 46
2024-11-24 16:58:56,735:INFO:Plotting tree 47
2024-11-24 16:58:56,831:INFO:Plotting tree 48
2024-11-24 16:58:56,924:INFO:Plotting tree 49
2024-11-24 16:58:57,027:INFO:Plotting tree 50
2024-11-24 16:58:57,143:INFO:Plotting tree 51
2024-11-24 16:58:57,252:INFO:Plotting tree 52
2024-11-24 16:58:57,373:INFO:Plotting tree 53
2024-11-24 16:58:57,496:INFO:Plotting tree 54
2024-11-24 16:58:57,587:INFO:Plotting tree 55
2024-11-24 16:58:57,720:INFO:Plotting tree 56
2024-11-24 16:58:57,822:INFO:Plotting tree 57
2024-11-24 16:58:57,929:INFO:Plotting tree 58
2024-11-24 16:58:58,029:INFO:Plotting tree 59
2024-11-24 16:58:58,157:INFO:Plotting tree 60
2024-11-24 16:58:58,267:INFO:Plotting tree 61
2024-11-24 16:58:58,402:INFO:Plotting tree 62
2024-11-24 16:58:58,491:INFO:Plotting tree 63
2024-11-24 16:58:58,766:INFO:Plotting tree 64
2024-11-24 16:58:58,873:INFO:Plotting tree 65
2024-11-24 16:58:58,970:INFO:Plotting tree 66
2024-11-24 16:58:59,076:INFO:Plotting tree 67
2024-11-24 16:58:59,186:INFO:Plotting tree 68
2024-11-24 16:58:59,305:INFO:Plotting tree 69
2024-11-24 16:58:59,425:INFO:Plotting tree 70
2024-11-24 16:58:59,533:INFO:Plotting tree 71
2024-11-24 16:58:59,665:INFO:Plotting tree 72
2024-11-24 16:58:59,776:INFO:Plotting tree 73
2024-11-24 16:58:59,892:INFO:Plotting tree 74
2024-11-24 16:58:59,973:INFO:Plotting tree 75
2024-11-24 16:59:00,098:INFO:Plotting tree 76
2024-11-24 16:59:00,225:INFO:Plotting tree 77
2024-11-24 16:59:00,350:INFO:Plotting tree 78
2024-11-24 16:59:00,460:INFO:Plotting tree 79
2024-11-24 16:59:00,559:INFO:Plotting tree 80
2024-11-24 16:59:00,666:INFO:Plotting tree 81
2024-11-24 16:59:00,772:INFO:Plotting tree 82
2024-11-24 16:59:00,905:INFO:Plotting tree 83
2024-11-24 16:59:00,998:INFO:Plotting tree 84
2024-11-24 16:59:01,112:INFO:Plotting tree 85
2024-11-24 16:59:01,193:INFO:Plotting tree 86
2024-11-24 16:59:01,307:INFO:Plotting tree 87
2024-11-24 16:59:01,424:INFO:Plotting tree 88
2024-11-24 16:59:01,542:INFO:Plotting tree 89
2024-11-24 16:59:01,655:INFO:Plotting tree 90
2024-11-24 16:59:01,792:INFO:Plotting tree 91
2024-11-24 16:59:01,916:INFO:Plotting tree 92
2024-11-24 16:59:02,012:INFO:Plotting tree 93
2024-11-24 16:59:02,118:INFO:Plotting tree 94
2024-11-24 16:59:02,378:INFO:Plotting tree 95
2024-11-24 16:59:02,480:INFO:Plotting tree 96
2024-11-24 16:59:02,567:INFO:Plotting tree 97
2024-11-24 16:59:02,689:INFO:Plotting tree 98
2024-11-24 16:59:02,820:INFO:Plotting tree 99
2024-11-24 16:59:53,600:INFO:Initializing evaluate_model()
2024-11-24 16:59:53,600:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 16:59:53,607:INFO:Initializing plot_model()
2024-11-24 16:59:53,607:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:59:53,607:INFO:Checking exceptions
2024-11-24 16:59:53,633:INFO:Preloading libraries
2024-11-24 16:59:53,641:INFO:Copying training dataset
2024-11-24 16:59:53,641:INFO:Plot type: pipeline
2024-11-24 16:59:53,752:INFO:Visual Rendered Successfully
2024-11-24 16:59:54,112:INFO:plot_model() successfully completed......................................
2024-11-24 16:59:54,131:INFO:Initializing plot_model()
2024-11-24 16:59:54,131:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:59:54,131:INFO:Checking exceptions
2024-11-24 16:59:54,155:INFO:Preloading libraries
2024-11-24 16:59:54,161:INFO:Copying training dataset
2024-11-24 16:59:54,161:INFO:Plot type: pipeline
2024-11-24 16:59:54,269:INFO:Visual Rendered Successfully
2024-11-24 16:59:54,627:INFO:plot_model() successfully completed......................................
2024-11-24 16:59:54,632:INFO:Initializing evaluate_model()
2024-11-24 16:59:54,632:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 16:59:54,640:INFO:Initializing plot_model()
2024-11-24 16:59:54,640:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 16:59:54,641:INFO:Checking exceptions
2024-11-24 16:59:54,679:INFO:Preloading libraries
2024-11-24 16:59:54,687:INFO:Copying training dataset
2024-11-24 16:59:54,687:INFO:Plot type: pipeline
2024-11-24 16:59:54,795:INFO:Visual Rendered Successfully
2024-11-24 16:59:55,168:INFO:plot_model() successfully completed......................................
2024-11-24 17:00:00,319:INFO:Initializing plot_model()
2024-11-24 17:00:00,319:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 17:00:00,319:INFO:Checking exceptions
2024-11-24 17:00:00,351:INFO:Preloading libraries
2024-11-24 17:00:00,358:INFO:Copying training dataset
2024-11-24 17:00:00,358:INFO:Plot type: feature_all
2024-11-24 17:00:00,455:WARNING:No coef_ found. Trying feature_importances_
2024-11-24 17:00:00,691:INFO:Visual Rendered Successfully
2024-11-24 17:00:01,063:INFO:plot_model() successfully completed......................................
2024-11-24 17:00:10,647:INFO:Initializing plot_model()
2024-11-24 17:00:10,647:INFO:plot_model(plot=tree, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 17:00:10,647:INFO:Checking exceptions
2024-11-24 17:00:10,668:INFO:Preloading libraries
2024-11-24 17:00:10,674:INFO:Copying training dataset
2024-11-24 17:00:10,674:INFO:Plot type: tree
2024-11-24 17:00:11,627:INFO:Plotting decision trees
2024-11-24 17:00:11,706:INFO:Plotting tree 0
2024-11-24 17:00:12,102:INFO:Plotting tree 1
2024-11-24 17:00:12,249:INFO:Plotting tree 2
2024-11-24 17:00:12,413:INFO:Plotting tree 3
2024-11-24 17:00:12,506:INFO:Plotting tree 4
2024-11-24 17:00:12,623:INFO:Plotting tree 5
2024-11-24 17:00:12,733:INFO:Plotting tree 6
2024-11-24 17:00:12,854:INFO:Plotting tree 7
2024-11-24 17:00:12,993:INFO:Plotting tree 8
2024-11-24 17:00:13,106:INFO:Plotting tree 9
2024-11-24 17:00:13,602:INFO:Plotting tree 10
2024-11-24 17:00:13,706:INFO:Plotting tree 11
2024-11-24 17:00:13,816:INFO:Plotting tree 12
2024-11-24 17:00:13,916:INFO:Plotting tree 13
2024-11-24 17:00:14,041:INFO:Plotting tree 14
2024-11-24 17:00:14,181:INFO:Plotting tree 15
2024-11-24 17:00:14,284:INFO:Plotting tree 16
2024-11-24 17:00:14,407:INFO:Plotting tree 17
2024-11-24 17:00:14,544:INFO:Plotting tree 18
2024-11-24 17:00:14,656:INFO:Plotting tree 19
2024-11-24 17:00:14,764:INFO:Plotting tree 20
2024-11-24 17:00:14,887:INFO:Plotting tree 21
2024-11-24 17:00:15,005:INFO:Plotting tree 22
2024-11-24 17:00:15,100:INFO:Plotting tree 23
2024-11-24 17:00:15,185:INFO:Plotting tree 24
2024-11-24 17:00:15,286:INFO:Plotting tree 25
2024-11-24 17:00:15,407:INFO:Plotting tree 26
2024-11-24 17:00:15,527:INFO:Plotting tree 27
2024-11-24 17:00:15,628:INFO:Plotting tree 28
2024-11-24 17:00:15,753:INFO:Plotting tree 29
2024-11-24 17:00:15,847:INFO:Plotting tree 30
2024-11-24 17:00:15,972:INFO:Plotting tree 31
2024-11-24 17:00:16,082:INFO:Plotting tree 32
2024-11-24 17:00:16,182:INFO:Plotting tree 33
2024-11-24 17:00:16,294:INFO:Plotting tree 34
2024-11-24 17:00:16,395:INFO:Plotting tree 35
2024-11-24 17:00:16,493:INFO:Plotting tree 36
2024-11-24 17:00:16,596:INFO:Plotting tree 37
2024-11-24 17:00:16,709:INFO:Plotting tree 38
2024-11-24 17:00:16,839:INFO:Plotting tree 39
2024-11-24 17:00:16,958:INFO:Plotting tree 40
2024-11-24 17:00:17,061:INFO:Plotting tree 41
2024-11-24 17:00:17,172:INFO:Plotting tree 42
2024-11-24 17:00:17,292:INFO:Plotting tree 43
2024-11-24 17:00:17,421:INFO:Plotting tree 44
2024-11-24 17:00:17,522:INFO:Plotting tree 45
2024-11-24 17:00:17,615:INFO:Plotting tree 46
2024-11-24 17:00:17,761:INFO:Plotting tree 47
2024-11-24 17:00:17,856:INFO:Plotting tree 48
2024-11-24 17:00:17,951:INFO:Plotting tree 49
2024-11-24 17:00:18,053:INFO:Plotting tree 50
2024-11-24 17:00:18,166:INFO:Plotting tree 51
2024-11-24 17:00:18,277:INFO:Plotting tree 52
2024-11-24 17:00:18,399:INFO:Plotting tree 53
2024-11-24 17:00:18,523:INFO:Plotting tree 54
2024-11-24 17:00:18,613:INFO:Plotting tree 55
2024-11-24 17:00:18,745:INFO:Plotting tree 56
2024-11-24 17:00:18,848:INFO:Plotting tree 57
2024-11-24 17:00:18,956:INFO:Plotting tree 58
2024-11-24 17:00:19,069:INFO:Plotting tree 59
2024-11-24 17:00:19,201:INFO:Plotting tree 60
2024-11-24 17:00:19,316:INFO:Plotting tree 61
2024-11-24 17:00:19,451:INFO:Plotting tree 62
2024-11-24 17:00:19,543:INFO:Plotting tree 63
2024-11-24 17:00:19,660:INFO:Plotting tree 64
2024-11-24 17:00:19,767:INFO:Plotting tree 65
2024-11-24 17:00:19,866:INFO:Plotting tree 66
2024-11-24 17:00:19,972:INFO:Plotting tree 67
2024-11-24 17:00:20,083:INFO:Plotting tree 68
2024-11-24 17:00:20,204:INFO:Plotting tree 69
2024-11-24 17:00:20,324:INFO:Plotting tree 70
2024-11-24 17:00:20,887:INFO:Plotting tree 71
2024-11-24 17:00:21,022:INFO:Plotting tree 72
2024-11-24 17:00:21,134:INFO:Plotting tree 73
2024-11-24 17:00:21,255:INFO:Plotting tree 74
2024-11-24 17:00:21,343:INFO:Plotting tree 75
2024-11-24 17:00:21,466:INFO:Plotting tree 76
2024-11-24 17:00:21,589:INFO:Plotting tree 77
2024-11-24 17:00:21,715:INFO:Plotting tree 78
2024-11-24 17:00:21,826:INFO:Plotting tree 79
2024-11-24 17:00:21,926:INFO:Plotting tree 80
2024-11-24 17:00:22,034:INFO:Plotting tree 81
2024-11-24 17:00:22,140:INFO:Plotting tree 82
2024-11-24 17:00:22,266:INFO:Plotting tree 83
2024-11-24 17:00:22,357:INFO:Plotting tree 84
2024-11-24 17:00:22,471:INFO:Plotting tree 85
2024-11-24 17:00:22,551:INFO:Plotting tree 86
2024-11-24 17:00:22,666:INFO:Plotting tree 87
2024-11-24 17:00:22,783:INFO:Plotting tree 88
2024-11-24 17:00:22,901:INFO:Plotting tree 89
2024-11-24 17:00:23,013:INFO:Plotting tree 90
2024-11-24 17:00:23,153:INFO:Plotting tree 91
2024-11-24 17:00:23,277:INFO:Plotting tree 92
2024-11-24 17:00:23,374:INFO:Plotting tree 93
2024-11-24 17:00:23,481:INFO:Plotting tree 94
2024-11-24 17:00:23,583:INFO:Plotting tree 95
2024-11-24 17:00:23,686:INFO:Plotting tree 96
2024-11-24 17:00:23,775:INFO:Plotting tree 97
2024-11-24 17:00:23,900:INFO:Plotting tree 98
2024-11-24 17:00:24,033:INFO:Plotting tree 99
2024-11-24 17:00:44,576:INFO:Initializing evaluate_model()
2024-11-24 17:00:44,576:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 17:00:44,583:INFO:Initializing plot_model()
2024-11-24 17:00:44,583:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 17:00:44,583:INFO:Checking exceptions
2024-11-24 17:00:44,613:INFO:Preloading libraries
2024-11-24 17:00:44,620:INFO:Copying training dataset
2024-11-24 17:00:44,620:INFO:Plot type: pipeline
2024-11-24 17:00:44,744:INFO:Visual Rendered Successfully
2024-11-24 17:00:45,652:INFO:plot_model() successfully completed......................................
2024-11-24 17:00:53,261:INFO:Initializing evaluate_model()
2024-11-24 17:00:53,261:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 17:00:53,268:INFO:Initializing plot_model()
2024-11-24 17:00:53,269:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 17:00:53,269:INFO:Checking exceptions
2024-11-24 17:00:53,289:INFO:Preloading libraries
2024-11-24 17:00:53,296:INFO:Copying training dataset
2024-11-24 17:00:53,296:INFO:Plot type: pipeline
2024-11-24 17:00:53,404:INFO:Visual Rendered Successfully
2024-11-24 17:00:53,778:INFO:plot_model() successfully completed......................................
2024-11-24 17:00:57,094:INFO:Initializing plot_model()
2024-11-24 17:00:57,094:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, system=True)
2024-11-24 17:00:57,094:INFO:Checking exceptions
2024-11-24 17:00:57,112:INFO:Preloading libraries
2024-11-24 17:00:57,118:INFO:Copying training dataset
2024-11-24 17:00:57,118:INFO:Plot type: feature
2024-11-24 17:00:57,118:WARNING:No coef_ found. Trying feature_importances_
2024-11-24 17:00:57,329:INFO:Visual Rendered Successfully
2024-11-24 17:00:57,712:INFO:plot_model() successfully completed......................................
2024-11-24 17:02:05,243:INFO:Initializing predict_model()
2024-11-24 17:02:05,243:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002ADA39BBE50>)
2024-11-24 17:02:05,243:INFO:Checking exceptions
2024-11-24 17:02:05,244:INFO:Preloading libraries
2024-11-24 17:02:05,471:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:02:05,474:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:02:05,477:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:05:37,451:INFO:Initializing finalize_model()
2024-11-24 17:05:37,451:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-24 17:05:37,452:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:05:37,455:INFO:Initializing create_model()
2024-11-24 17:05:37,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:05:37,455:INFO:Checking exceptions
2024-11-24 17:05:37,456:INFO:Importing libraries
2024-11-24 17:05:37,456:INFO:Copying training dataset
2024-11-24 17:05:37,456:INFO:Defining folds
2024-11-24 17:05:37,456:INFO:Declaring metric variables
2024-11-24 17:05:37,456:INFO:Importing untrained model
2024-11-24 17:05:37,456:INFO:Declaring custom model
2024-11-24 17:05:37,457:INFO:Random Forest Classifier Imported successfully
2024-11-24 17:05:37,458:INFO:Cross validation set to False
2024-11-24 17:05:37,458:INFO:Fitting Model
2024-11-24 17:05:37,739:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:05:37,739:INFO:create_model() successfully completed......................................
2024-11-24 17:05:38,109:INFO:_master_model_container: 14
2024-11-24 17:05:38,109:INFO:_display_container: 3
2024-11-24 17:05:38,200:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:05:38,200:INFO:finalize_model() successfully completed......................................
2024-11-24 17:05:48,337:INFO:Initializing finalize_model()
2024-11-24 17:05:48,337:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-24 17:05:48,337:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:05:48,340:INFO:Initializing create_model()
2024-11-24 17:05:48,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002ADBBE5A850>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:05:48,340:INFO:Checking exceptions
2024-11-24 17:05:48,341:INFO:Importing libraries
2024-11-24 17:05:48,342:INFO:Copying training dataset
2024-11-24 17:05:48,342:INFO:Defining folds
2024-11-24 17:05:48,342:INFO:Declaring metric variables
2024-11-24 17:05:48,342:INFO:Importing untrained model
2024-11-24 17:05:48,342:INFO:Declaring custom model
2024-11-24 17:05:48,343:INFO:Random Forest Classifier Imported successfully
2024-11-24 17:05:48,344:INFO:Cross validation set to False
2024-11-24 17:05:48,344:INFO:Fitting Model
2024-11-24 17:05:48,633:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:05:48,633:INFO:create_model() successfully completed......................................
2024-11-24 17:05:48,998:INFO:_master_model_container: 14
2024-11-24 17:05:48,998:INFO:_display_container: 3
2024-11-24 17:05:49,090:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:05:49,090:INFO:finalize_model() successfully completed......................................
2024-11-24 17:10:30,422:INFO:Initializing save_model()
2024-11-24 17:10:30,422:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), model_name=../model/classificationModel_randomForestClass_v1, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\trepa\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                         'mapping': No                   0
Yes                  1
NaN                 -1
dtype: int64},
                                                                        {'col': 'Alopecia ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No           0
Yes          1
NaN         -1
dtype: int64},
                                                                        {'col': 'Obesity ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No          0
Yes         1
NaN        -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-24 17:10:30,422:INFO:Adding model into prep_pipe
2024-11-24 17:10:30,461:INFO:../model/classificationModel_randomForestClass_v1.pkl saved in current working directory
2024-11-24 17:10:30,551:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:10:30,551:INFO:save_model() successfully completed......................................
2024-11-24 17:40:41,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 17:40:41,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 17:40:41,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 17:40:41,079:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-24 17:40:41,455:INFO:PyCaret ClassificationExperiment
2024-11-24 17:40:41,456:INFO:Logging name: clf-default-name
2024-11-24 17:40:41,456:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-24 17:40:41,456:INFO:version 3.3.2
2024-11-24 17:40:41,456:INFO:Initializing setup()
2024-11-24 17:40:41,456:INFO:self.USI: 51b7
2024-11-24 17:40:41,456:INFO:self._variable_keys: {'fold_shuffle_param', 'fold_groups_param', 'gpu_param', 'log_plots_param', 'n_jobs_param', 'y_test', 'gpu_n_jobs_param', 'y_train', '_ml_usecase', 'fold_generator', 'target_param', 'seed', 'logging_param', 'fix_imbalance', 'pipeline', 'data', 'idx', 'USI', 'X', 'X_test', 'is_multiclass', 'html_param', 'memory', 'X_train', 'exp_name_log', '_available_plots', 'exp_id', 'y'}
2024-11-24 17:40:41,456:INFO:Checking environment
2024-11-24 17:40:41,456:INFO:python_version: 3.9.20
2024-11-24 17:40:41,456:INFO:python_build: ('main', 'Oct  3 2024 07:38:01')
2024-11-24 17:40:41,456:INFO:machine: AMD64
2024-11-24 17:40:41,456:INFO:platform: Windows-10-10.0.22621-SP0
2024-11-24 17:40:41,460:INFO:Memory: svmem(total=34266886144, available=23777972224, percent=30.6, used=10488913920, free=23777972224)
2024-11-24 17:40:41,460:INFO:Physical Core: 6
2024-11-24 17:40:41,460:INFO:Logical Core: 12
2024-11-24 17:40:41,460:INFO:Checking libraries
2024-11-24 17:40:41,460:INFO:System:
2024-11-24 17:40:41,460:INFO:    python: 3.9.20 (main, Oct  3 2024, 07:38:01) [MSC v.1929 64 bit (AMD64)]
2024-11-24 17:40:41,460:INFO:executable: c:\Users\trepa\anaconda3\envs\mlops_course\python.exe
2024-11-24 17:40:41,460:INFO:   machine: Windows-10-10.0.22621-SP0
2024-11-24 17:40:41,461:INFO:PyCaret required dependencies:
2024-11-24 17:40:41,480:INFO:                 pip: 24.2
2024-11-24 17:40:41,480:INFO:          setuptools: 75.1.0
2024-11-24 17:40:41,480:INFO:             pycaret: 3.3.2
2024-11-24 17:40:41,480:INFO:             IPython: 8.18.1
2024-11-24 17:40:41,480:INFO:          ipywidgets: 8.1.5
2024-11-24 17:40:41,480:INFO:                tqdm: 4.67.0
2024-11-24 17:40:41,480:INFO:               numpy: 1.26.4
2024-11-24 17:40:41,480:INFO:              pandas: 2.1.4
2024-11-24 17:40:41,480:INFO:              jinja2: 3.1.4
2024-11-24 17:40:41,480:INFO:               scipy: 1.11.4
2024-11-24 17:40:41,480:INFO:              joblib: 1.3.2
2024-11-24 17:40:41,480:INFO:             sklearn: 1.4.2
2024-11-24 17:40:41,480:INFO:                pyod: 2.0.2
2024-11-24 17:40:41,480:INFO:            imblearn: 0.12.4
2024-11-24 17:40:41,480:INFO:   category_encoders: 2.6.4
2024-11-24 17:40:41,480:INFO:            lightgbm: 4.5.0
2024-11-24 17:40:41,480:INFO:               numba: 0.60.0
2024-11-24 17:40:41,481:INFO:            requests: 2.32.3
2024-11-24 17:40:41,481:INFO:          matplotlib: 3.7.5
2024-11-24 17:40:41,481:INFO:          scikitplot: 0.3.7
2024-11-24 17:40:41,481:INFO:         yellowbrick: 1.5
2024-11-24 17:40:41,481:INFO:              plotly: 5.24.1
2024-11-24 17:40:41,481:INFO:    plotly-resampler: Not installed
2024-11-24 17:40:41,481:INFO:             kaleido: 0.2.1
2024-11-24 17:40:41,481:INFO:           schemdraw: 0.15
2024-11-24 17:40:41,481:INFO:         statsmodels: 0.14.4
2024-11-24 17:40:41,481:INFO:              sktime: 0.26.0
2024-11-24 17:40:41,481:INFO:               tbats: 1.1.3
2024-11-24 17:40:41,481:INFO:            pmdarima: 2.0.4
2024-11-24 17:40:41,481:INFO:              psutil: 6.1.0
2024-11-24 17:40:41,481:INFO:          markupsafe: 3.0.2
2024-11-24 17:40:41,481:INFO:             pickle5: Not installed
2024-11-24 17:40:41,481:INFO:         cloudpickle: 3.1.0
2024-11-24 17:40:41,481:INFO:         deprecation: 2.1.0
2024-11-24 17:40:41,481:INFO:              xxhash: 3.5.0
2024-11-24 17:40:41,481:INFO:           wurlitzer: Not installed
2024-11-24 17:40:41,481:INFO:PyCaret optional dependencies:
2024-11-24 17:40:41,493:INFO:                shap: Not installed
2024-11-24 17:40:41,493:INFO:           interpret: Not installed
2024-11-24 17:40:41,493:INFO:                umap: Not installed
2024-11-24 17:40:41,493:INFO:     ydata_profiling: Not installed
2024-11-24 17:40:41,493:INFO:  explainerdashboard: Not installed
2024-11-24 17:40:41,493:INFO:             autoviz: Not installed
2024-11-24 17:40:41,493:INFO:           fairlearn: Not installed
2024-11-24 17:40:41,493:INFO:          deepchecks: Not installed
2024-11-24 17:40:41,493:INFO:             xgboost: Not installed
2024-11-24 17:40:41,493:INFO:            catboost: Not installed
2024-11-24 17:40:41,493:INFO:              kmodes: Not installed
2024-11-24 17:40:41,493:INFO:             mlxtend: Not installed
2024-11-24 17:40:41,493:INFO:       statsforecast: Not installed
2024-11-24 17:40:41,493:INFO:        tune_sklearn: Not installed
2024-11-24 17:40:41,493:INFO:                 ray: Not installed
2024-11-24 17:40:41,493:INFO:            hyperopt: Not installed
2024-11-24 17:40:41,493:INFO:              optuna: Not installed
2024-11-24 17:40:41,493:INFO:               skopt: Not installed
2024-11-24 17:40:41,493:INFO:              mlflow: Not installed
2024-11-24 17:40:41,493:INFO:              gradio: Not installed
2024-11-24 17:40:41,493:INFO:             fastapi: Not installed
2024-11-24 17:40:41,493:INFO:             uvicorn: Not installed
2024-11-24 17:40:41,494:INFO:              m2cgen: Not installed
2024-11-24 17:40:41,494:INFO:           evidently: Not installed
2024-11-24 17:40:41,494:INFO:               fugue: Not installed
2024-11-24 17:40:41,494:INFO:           streamlit: Not installed
2024-11-24 17:40:41,494:INFO:             prophet: Not installed
2024-11-24 17:40:41,494:INFO:None
2024-11-24 17:40:41,494:INFO:Set up data.
2024-11-24 17:40:41,500:INFO:Set up folding strategy.
2024-11-24 17:40:41,500:INFO:Set up train/test split.
2024-11-24 17:40:41,507:INFO:Set up index.
2024-11-24 17:40:41,507:INFO:Assigning column types.
2024-11-24 17:40:41,510:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-24 17:40:41,553:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,556:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,588:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,588:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,632:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,633:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,660:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,661:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,661:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-24 17:40:41,705:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,732:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,781:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-24 17:40:41,808:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,809:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,809:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-24 17:40:41,880:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,952:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,952:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:41,954:INFO:Preparing preprocessing pipeline...
2024-11-24 17:40:41,954:INFO:Set up label encoding.
2024-11-24 17:40:41,955:INFO:Set up simple imputation.
2024-11-24 17:40:41,963:INFO:Set up encoding of ordinal features.
2024-11-24 17:40:41,975:INFO:Set up encoding of categorical features.
2024-11-24 17:40:41,976:INFO:Set up column name cleaning.
2024-11-24 17:40:42,113:INFO:Finished creating preprocessing pipeline.
2024-11-24 17:40:42,202:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\trepa\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=F...
                                                                         'mapping': No                   0
Yes                  1
NaN                 -1
dtype: int64},
                                                                        {'col': 'Alopecia ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No           0
Yes          1
NaN         -1
dtype: int64},
                                                                        {'col': 'Obesity ',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No          0
Yes         1
NaN        -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-24 17:40:42,202:INFO:Creating final display dataframe.
2024-11-24 17:40:42,509:INFO:Setup _display_container:                     Description                     Value
0                    Session id                       123
1                        Target                     class
2                   Target type                    Binary
3                Target mapping  Negative: 0, Positive: 1
4           Original data shape                 (520, 17)
5        Transformed data shape                 (520, 17)
6   Transformed train set shape                 (364, 17)
7    Transformed test set shape                 (156, 17)
8              Numeric features                         1
9          Categorical features                        15
10                   Preprocess                      True
11              Imputation type                    simple
12           Numeric imputation                      mean
13       Categorical imputation                      mode
14     Maximum one-hot encoding                        25
15              Encoding method                      None
16               Fold Generator           StratifiedKFold
17                  Fold Number                        10
18                     CPU Jobs                        -1
19                      Use GPU                     False
20               Log Experiment                     False
21              Experiment Name          clf-default-name
22                          USI                      51b7
2024-11-24 17:40:42,586:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:42,586:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:42,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:42,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-24 17:40:42,658:INFO:setup() successfully completed in 1.2s...............
2024-11-24 17:40:45,319:INFO:Initializing compare_models()
2024-11-24 17:40:45,319:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-24 17:40:45,319:INFO:Checking exceptions
2024-11-24 17:40:45,322:INFO:Preparing display monitor
2024-11-24 17:40:45,341:INFO:Initializing Logistic Regression
2024-11-24 17:40:45,341:INFO:Total runtime is 0.0 minutes
2024-11-24 17:40:45,344:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:45,344:INFO:Initializing create_model()
2024-11-24 17:40:45,344:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:45,344:INFO:Checking exceptions
2024-11-24 17:40:45,344:INFO:Importing libraries
2024-11-24 17:40:45,344:INFO:Copying training dataset
2024-11-24 17:40:45,348:INFO:Defining folds
2024-11-24 17:40:45,348:INFO:Declaring metric variables
2024-11-24 17:40:45,351:INFO:Importing untrained model
2024-11-24 17:40:45,356:INFO:Logistic Regression Imported successfully
2024-11-24 17:40:45,362:INFO:Starting cross validation
2024-11-24 17:40:45,363:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:48,877:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,879:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,881:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,897:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,899:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,901:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,930:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,933:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,935:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,963:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,966:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,968:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,972:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,975:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,976:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,977:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,978:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,980:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,980:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,982:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,984:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,995:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,998:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:48,998:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:49,001:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:49,001:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:49,004:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:52,747:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:52,749:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:52,751:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:52,763:INFO:Calculating mean and std
2024-11-24 17:40:52,765:INFO:Creating metrics dataframe
2024-11-24 17:40:52,766:INFO:Uploading results into container
2024-11-24 17:40:52,767:INFO:Uploading model into container now
2024-11-24 17:40:52,767:INFO:_master_model_container: 1
2024-11-24 17:40:52,768:INFO:_display_container: 2
2024-11-24 17:40:52,768:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-24 17:40:52,768:INFO:create_model() successfully completed......................................
2024-11-24 17:40:52,832:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:52,832:INFO:Creating metrics dataframe
2024-11-24 17:40:52,837:INFO:Initializing K Neighbors Classifier
2024-11-24 17:40:52,837:INFO:Total runtime is 0.12493642568588256 minutes
2024-11-24 17:40:52,840:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:52,841:INFO:Initializing create_model()
2024-11-24 17:40:52,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:52,841:INFO:Checking exceptions
2024-11-24 17:40:52,841:INFO:Importing libraries
2024-11-24 17:40:52,841:INFO:Copying training dataset
2024-11-24 17:40:52,844:INFO:Defining folds
2024-11-24 17:40:52,844:INFO:Declaring metric variables
2024-11-24 17:40:52,846:INFO:Importing untrained model
2024-11-24 17:40:52,848:INFO:K Neighbors Classifier Imported successfully
2024-11-24 17:40:52,855:INFO:Starting cross validation
2024-11-24 17:40:52,856:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:53,160:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,163:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,166:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,186:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,190:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,192:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,193:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,194:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,195:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,197:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,198:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,200:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,200:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,203:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,207:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,211:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,212:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,213:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,215:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,216:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,217:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,217:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,220:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:53,223:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,913:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,913:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,915:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,915:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,916:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,916:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:54,935:INFO:Calculating mean and std
2024-11-24 17:40:54,936:INFO:Creating metrics dataframe
2024-11-24 17:40:54,939:INFO:Uploading results into container
2024-11-24 17:40:54,939:INFO:Uploading model into container now
2024-11-24 17:40:54,940:INFO:_master_model_container: 2
2024-11-24 17:40:54,940:INFO:_display_container: 2
2024-11-24 17:40:54,940:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-24 17:40:54,940:INFO:create_model() successfully completed......................................
2024-11-24 17:40:55,005:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:55,005:INFO:Creating metrics dataframe
2024-11-24 17:40:55,010:INFO:Initializing Naive Bayes
2024-11-24 17:40:55,011:INFO:Total runtime is 0.1611654241879781 minutes
2024-11-24 17:40:55,013:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:55,013:INFO:Initializing create_model()
2024-11-24 17:40:55,014:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:55,014:INFO:Checking exceptions
2024-11-24 17:40:55,014:INFO:Importing libraries
2024-11-24 17:40:55,014:INFO:Copying training dataset
2024-11-24 17:40:55,016:INFO:Defining folds
2024-11-24 17:40:55,016:INFO:Declaring metric variables
2024-11-24 17:40:55,018:INFO:Importing untrained model
2024-11-24 17:40:55,022:INFO:Naive Bayes Imported successfully
2024-11-24 17:40:55,027:INFO:Starting cross validation
2024-11-24 17:40:55,028:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:55,212:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,213:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,215:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,215:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,217:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,218:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,218:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,220:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,221:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,226:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,227:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,228:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,229:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,229:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,231:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,232:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,232:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,233:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,234:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,235:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,237:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,237:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,242:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,244:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,246:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,246:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,247:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,249:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,259:INFO:Calculating mean and std
2024-11-24 17:40:55,260:INFO:Creating metrics dataframe
2024-11-24 17:40:55,262:INFO:Uploading results into container
2024-11-24 17:40:55,262:INFO:Uploading model into container now
2024-11-24 17:40:55,262:INFO:_master_model_container: 3
2024-11-24 17:40:55,262:INFO:_display_container: 2
2024-11-24 17:40:55,263:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-24 17:40:55,263:INFO:create_model() successfully completed......................................
2024-11-24 17:40:55,326:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:55,326:INFO:Creating metrics dataframe
2024-11-24 17:40:55,331:INFO:Initializing Decision Tree Classifier
2024-11-24 17:40:55,332:INFO:Total runtime is 0.1665214697519938 minutes
2024-11-24 17:40:55,334:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:55,334:INFO:Initializing create_model()
2024-11-24 17:40:55,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:55,334:INFO:Checking exceptions
2024-11-24 17:40:55,334:INFO:Importing libraries
2024-11-24 17:40:55,334:INFO:Copying training dataset
2024-11-24 17:40:55,338:INFO:Defining folds
2024-11-24 17:40:55,338:INFO:Declaring metric variables
2024-11-24 17:40:55,341:INFO:Importing untrained model
2024-11-24 17:40:55,344:INFO:Decision Tree Classifier Imported successfully
2024-11-24 17:40:55,349:INFO:Starting cross validation
2024-11-24 17:40:55,350:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:55,547:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,549:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,553:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,560:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,560:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,564:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,564:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,567:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,568:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,575:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,577:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,578:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,579:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,580:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,581:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,582:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,582:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,583:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,584:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,585:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,585:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,587:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,587:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,590:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,598:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,600:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,602:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,602:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,603:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,605:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,613:INFO:Calculating mean and std
2024-11-24 17:40:55,615:INFO:Creating metrics dataframe
2024-11-24 17:40:55,616:INFO:Uploading results into container
2024-11-24 17:40:55,617:INFO:Uploading model into container now
2024-11-24 17:40:55,617:INFO:_master_model_container: 4
2024-11-24 17:40:55,617:INFO:_display_container: 2
2024-11-24 17:40:55,617:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-11-24 17:40:55,618:INFO:create_model() successfully completed......................................
2024-11-24 17:40:55,682:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:55,682:INFO:Creating metrics dataframe
2024-11-24 17:40:55,687:INFO:Initializing SVM - Linear Kernel
2024-11-24 17:40:55,687:INFO:Total runtime is 0.17243820826212564 minutes
2024-11-24 17:40:55,690:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:55,690:INFO:Initializing create_model()
2024-11-24 17:40:55,690:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:55,690:INFO:Checking exceptions
2024-11-24 17:40:55,690:INFO:Importing libraries
2024-11-24 17:40:55,690:INFO:Copying training dataset
2024-11-24 17:40:55,694:INFO:Defining folds
2024-11-24 17:40:55,694:INFO:Declaring metric variables
2024-11-24 17:40:55,697:INFO:Importing untrained model
2024-11-24 17:40:55,699:INFO:SVM - Linear Kernel Imported successfully
2024-11-24 17:40:55,704:INFO:Starting cross validation
2024-11-24 17:40:55,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:55,883:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,887:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,887:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,889:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,892:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,892:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,895:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,895:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,896:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,898:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,898:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,901:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,905:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,906:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,906:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:55,907:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,908:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,909:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,909:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,912:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,912:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,915:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,915:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,918:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,920:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,922:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,923:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,925:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,927:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:55,938:INFO:Calculating mean and std
2024-11-24 17:40:55,939:INFO:Creating metrics dataframe
2024-11-24 17:40:55,941:INFO:Uploading results into container
2024-11-24 17:40:55,941:INFO:Uploading model into container now
2024-11-24 17:40:55,941:INFO:_master_model_container: 5
2024-11-24 17:40:55,941:INFO:_display_container: 2
2024-11-24 17:40:55,942:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-24 17:40:55,942:INFO:create_model() successfully completed......................................
2024-11-24 17:40:56,006:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:56,006:INFO:Creating metrics dataframe
2024-11-24 17:40:56,012:INFO:Initializing Ridge Classifier
2024-11-24 17:40:56,012:INFO:Total runtime is 0.17784891525904337 minutes
2024-11-24 17:40:56,014:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:56,014:INFO:Initializing create_model()
2024-11-24 17:40:56,014:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:56,014:INFO:Checking exceptions
2024-11-24 17:40:56,014:INFO:Importing libraries
2024-11-24 17:40:56,014:INFO:Copying training dataset
2024-11-24 17:40:56,017:INFO:Defining folds
2024-11-24 17:40:56,017:INFO:Declaring metric variables
2024-11-24 17:40:56,020:INFO:Importing untrained model
2024-11-24 17:40:56,022:INFO:Ridge Classifier Imported successfully
2024-11-24 17:40:56,027:INFO:Starting cross validation
2024-11-24 17:40:56,029:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:56,225:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,228:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,229:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,230:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,231:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,232:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,232:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,233:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,234:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,235:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,235:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,236:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,237:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,237:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,238:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,239:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,240:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,241:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,244:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,244:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,245:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,247:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,247:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,249:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,249:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,251:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,253:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,260:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,262:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,263:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,279:INFO:Calculating mean and std
2024-11-24 17:40:56,280:INFO:Creating metrics dataframe
2024-11-24 17:40:56,281:INFO:Uploading results into container
2024-11-24 17:40:56,282:INFO:Uploading model into container now
2024-11-24 17:40:56,283:INFO:_master_model_container: 6
2024-11-24 17:40:56,283:INFO:_display_container: 2
2024-11-24 17:40:56,283:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-11-24 17:40:56,284:INFO:create_model() successfully completed......................................
2024-11-24 17:40:56,348:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:56,348:INFO:Creating metrics dataframe
2024-11-24 17:40:56,353:INFO:Initializing Random Forest Classifier
2024-11-24 17:40:56,353:INFO:Total runtime is 0.183535369237264 minutes
2024-11-24 17:40:56,357:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:56,357:INFO:Initializing create_model()
2024-11-24 17:40:56,357:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:56,358:INFO:Checking exceptions
2024-11-24 17:40:56,358:INFO:Importing libraries
2024-11-24 17:40:56,358:INFO:Copying training dataset
2024-11-24 17:40:56,361:INFO:Defining folds
2024-11-24 17:40:56,361:INFO:Declaring metric variables
2024-11-24 17:40:56,363:INFO:Importing untrained model
2024-11-24 17:40:56,366:INFO:Random Forest Classifier Imported successfully
2024-11-24 17:40:56,370:INFO:Starting cross validation
2024-11-24 17:40:56,372:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:56,827:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,827:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,827:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,828:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,830:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,830:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,831:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,831:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,833:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,833:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,834:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,834:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,841:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,842:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,845:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,845:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,847:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,847:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,856:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,857:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,858:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,858:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,859:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,860:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,860:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,860:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,861:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,862:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,862:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,863:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:56,868:INFO:Calculating mean and std
2024-11-24 17:40:56,869:INFO:Creating metrics dataframe
2024-11-24 17:40:56,871:INFO:Uploading results into container
2024-11-24 17:40:56,871:INFO:Uploading model into container now
2024-11-24 17:40:56,871:INFO:_master_model_container: 7
2024-11-24 17:40:56,872:INFO:_display_container: 2
2024-11-24 17:40:56,872:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:40:56,872:INFO:create_model() successfully completed......................................
2024-11-24 17:40:56,937:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:56,937:INFO:Creating metrics dataframe
2024-11-24 17:40:56,943:INFO:Initializing Quadratic Discriminant Analysis
2024-11-24 17:40:56,943:INFO:Total runtime is 0.19336017767588295 minutes
2024-11-24 17:40:56,945:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:56,946:INFO:Initializing create_model()
2024-11-24 17:40:56,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:56,946:INFO:Checking exceptions
2024-11-24 17:40:56,946:INFO:Importing libraries
2024-11-24 17:40:56,946:INFO:Copying training dataset
2024-11-24 17:40:56,949:INFO:Defining folds
2024-11-24 17:40:56,949:INFO:Declaring metric variables
2024-11-24 17:40:56,951:INFO:Importing untrained model
2024-11-24 17:40:56,953:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-24 17:40:56,958:INFO:Starting cross validation
2024-11-24 17:40:56,960:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:57,143:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,146:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,147:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,148:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,149:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,150:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,150:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,151:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,151:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,152:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,154:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,154:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,154:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,155:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,156:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,167:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,169:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,170:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,170:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,171:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,171:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,171:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,171:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,173:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,173:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,174:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,175:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,175:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,178:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,179:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,192:INFO:Calculating mean and std
2024-11-24 17:40:57,193:INFO:Creating metrics dataframe
2024-11-24 17:40:57,195:INFO:Uploading results into container
2024-11-24 17:40:57,195:INFO:Uploading model into container now
2024-11-24 17:40:57,195:INFO:_master_model_container: 8
2024-11-24 17:40:57,195:INFO:_display_container: 2
2024-11-24 17:40:57,196:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-24 17:40:57,196:INFO:create_model() successfully completed......................................
2024-11-24 17:40:57,260:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:57,260:INFO:Creating metrics dataframe
2024-11-24 17:40:57,266:INFO:Initializing Ada Boost Classifier
2024-11-24 17:40:57,266:INFO:Total runtime is 0.19874491294225055 minutes
2024-11-24 17:40:57,268:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:57,268:INFO:Initializing create_model()
2024-11-24 17:40:57,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:57,268:INFO:Checking exceptions
2024-11-24 17:40:57,268:INFO:Importing libraries
2024-11-24 17:40:57,268:INFO:Copying training dataset
2024-11-24 17:40:57,271:INFO:Defining folds
2024-11-24 17:40:57,272:INFO:Declaring metric variables
2024-11-24 17:40:57,274:INFO:Importing untrained model
2024-11-24 17:40:57,276:INFO:Ada Boost Classifier Imported successfully
2024-11-24 17:40:57,281:INFO:Starting cross validation
2024-11-24 17:40:57,282:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:57,413:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,417:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,419:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,425:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,426:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,429:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,430:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,430:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,436:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,451:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-24 17:40:57,559:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,561:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,564:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,566:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,570:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,572:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,573:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,574:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,575:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,575:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,576:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,576:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,577:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,578:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,578:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,579:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,579:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,580:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,582:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,583:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,586:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,587:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,589:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,589:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,590:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,591:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,593:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,595:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,597:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,599:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:57,608:INFO:Calculating mean and std
2024-11-24 17:40:57,609:INFO:Creating metrics dataframe
2024-11-24 17:40:57,611:INFO:Uploading results into container
2024-11-24 17:40:57,611:INFO:Uploading model into container now
2024-11-24 17:40:57,612:INFO:_master_model_container: 9
2024-11-24 17:40:57,612:INFO:_display_container: 2
2024-11-24 17:40:57,612:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-11-24 17:40:57,612:INFO:create_model() successfully completed......................................
2024-11-24 17:40:57,676:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:57,676:INFO:Creating metrics dataframe
2024-11-24 17:40:57,683:INFO:Initializing Gradient Boosting Classifier
2024-11-24 17:40:57,683:INFO:Total runtime is 0.20569014946619668 minutes
2024-11-24 17:40:57,685:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:57,686:INFO:Initializing create_model()
2024-11-24 17:40:57,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:57,686:INFO:Checking exceptions
2024-11-24 17:40:57,686:INFO:Importing libraries
2024-11-24 17:40:57,686:INFO:Copying training dataset
2024-11-24 17:40:57,689:INFO:Defining folds
2024-11-24 17:40:57,689:INFO:Declaring metric variables
2024-11-24 17:40:57,692:INFO:Importing untrained model
2024-11-24 17:40:57,694:INFO:Gradient Boosting Classifier Imported successfully
2024-11-24 17:40:57,698:INFO:Starting cross validation
2024-11-24 17:40:57,700:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:58,028:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,031:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,035:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,035:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,036:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,037:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,037:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,039:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,040:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,040:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,041:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,042:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,042:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,045:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,048:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,049:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,051:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,051:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,051:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,053:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,053:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,053:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,055:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,055:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,058:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,060:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,062:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,065:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,067:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,069:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,073:INFO:Calculating mean and std
2024-11-24 17:40:58,074:INFO:Creating metrics dataframe
2024-11-24 17:40:58,075:INFO:Uploading results into container
2024-11-24 17:40:58,076:INFO:Uploading model into container now
2024-11-24 17:40:58,076:INFO:_master_model_container: 10
2024-11-24 17:40:58,076:INFO:_display_container: 2
2024-11-24 17:40:58,077:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-24 17:40:58,077:INFO:create_model() successfully completed......................................
2024-11-24 17:40:58,141:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:58,142:INFO:Creating metrics dataframe
2024-11-24 17:40:58,148:INFO:Initializing Linear Discriminant Analysis
2024-11-24 17:40:58,148:INFO:Total runtime is 0.21345149278640746 minutes
2024-11-24 17:40:58,150:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:58,150:INFO:Initializing create_model()
2024-11-24 17:40:58,150:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:58,150:INFO:Checking exceptions
2024-11-24 17:40:58,151:INFO:Importing libraries
2024-11-24 17:40:58,151:INFO:Copying training dataset
2024-11-24 17:40:58,153:INFO:Defining folds
2024-11-24 17:40:58,153:INFO:Declaring metric variables
2024-11-24 17:40:58,157:INFO:Importing untrained model
2024-11-24 17:40:58,159:INFO:Linear Discriminant Analysis Imported successfully
2024-11-24 17:40:58,164:INFO:Starting cross validation
2024-11-24 17:40:58,165:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:58,349:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,352:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,352:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,354:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,355:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,356:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,356:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,357:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,358:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,359:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,359:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,360:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,362:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,362:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,363:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,364:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,366:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,368:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,368:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,368:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,370:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,370:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,370:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,372:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,372:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,373:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,376:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,378:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,380:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,397:INFO:Calculating mean and std
2024-11-24 17:40:58,398:INFO:Creating metrics dataframe
2024-11-24 17:40:58,400:INFO:Uploading results into container
2024-11-24 17:40:58,400:INFO:Uploading model into container now
2024-11-24 17:40:58,401:INFO:_master_model_container: 11
2024-11-24 17:40:58,401:INFO:_display_container: 2
2024-11-24 17:40:58,401:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-24 17:40:58,401:INFO:create_model() successfully completed......................................
2024-11-24 17:40:58,465:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:58,466:INFO:Creating metrics dataframe
2024-11-24 17:40:58,472:INFO:Initializing Extra Trees Classifier
2024-11-24 17:40:58,473:INFO:Total runtime is 0.21886509656906128 minutes
2024-11-24 17:40:58,475:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:58,475:INFO:Initializing create_model()
2024-11-24 17:40:58,475:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:58,475:INFO:Checking exceptions
2024-11-24 17:40:58,475:INFO:Importing libraries
2024-11-24 17:40:58,475:INFO:Copying training dataset
2024-11-24 17:40:58,478:INFO:Defining folds
2024-11-24 17:40:58,478:INFO:Declaring metric variables
2024-11-24 17:40:58,480:INFO:Importing untrained model
2024-11-24 17:40:58,483:INFO:Extra Trees Classifier Imported successfully
2024-11-24 17:40:58,488:INFO:Starting cross validation
2024-11-24 17:40:58,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:58,867:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,870:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,873:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,883:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,883:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,883:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,883:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,886:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,886:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,886:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,889:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,889:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,889:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,890:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,897:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,897:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,897:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,898:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,900:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,900:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,900:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,903:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,911:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,913:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,915:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:58,923:INFO:Calculating mean and std
2024-11-24 17:40:58,925:INFO:Creating metrics dataframe
2024-11-24 17:40:58,926:INFO:Uploading results into container
2024-11-24 17:40:58,927:INFO:Uploading model into container now
2024-11-24 17:40:58,927:INFO:_master_model_container: 12
2024-11-24 17:40:58,927:INFO:_display_container: 2
2024-11-24 17:40:58,928:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-11-24 17:40:58,928:INFO:create_model() successfully completed......................................
2024-11-24 17:40:58,992:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:58,992:INFO:Creating metrics dataframe
2024-11-24 17:40:58,999:INFO:Initializing Light Gradient Boosting Machine
2024-11-24 17:40:58,999:INFO:Total runtime is 0.2276315728823344 minutes
2024-11-24 17:40:59,002:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:59,002:INFO:Initializing create_model()
2024-11-24 17:40:59,003:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:59,003:INFO:Checking exceptions
2024-11-24 17:40:59,003:INFO:Importing libraries
2024-11-24 17:40:59,003:INFO:Copying training dataset
2024-11-24 17:40:59,005:INFO:Defining folds
2024-11-24 17:40:59,005:INFO:Declaring metric variables
2024-11-24 17:40:59,008:INFO:Importing untrained model
2024-11-24 17:40:59,011:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-24 17:40:59,015:INFO:Starting cross validation
2024-11-24 17:40:59,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:59,483:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,484:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,486:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,487:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,488:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,489:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,499:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,502:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,505:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,507:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,508:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,510:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,510:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,513:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,513:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,520:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,523:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,526:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,549:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,551:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,554:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,560:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,564:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,566:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,580:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,582:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,584:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,613:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,615:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,617:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,637:INFO:Calculating mean and std
2024-11-24 17:40:59,638:INFO:Creating metrics dataframe
2024-11-24 17:40:59,640:INFO:Uploading results into container
2024-11-24 17:40:59,641:INFO:Uploading model into container now
2024-11-24 17:40:59,641:INFO:_master_model_container: 13
2024-11-24 17:40:59,641:INFO:_display_container: 2
2024-11-24 17:40:59,642:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-24 17:40:59,642:INFO:create_model() successfully completed......................................
2024-11-24 17:40:59,718:INFO:SubProcess create_model() end ==================================
2024-11-24 17:40:59,718:INFO:Creating metrics dataframe
2024-11-24 17:40:59,725:INFO:Initializing Dummy Classifier
2024-11-24 17:40:59,725:INFO:Total runtime is 0.23973085482915243 minutes
2024-11-24 17:40:59,728:INFO:SubProcess create_model() called ==================================
2024-11-24 17:40:59,728:INFO:Initializing create_model()
2024-11-24 17:40:59,728:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002BD768CD040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:40:59,728:INFO:Checking exceptions
2024-11-24 17:40:59,728:INFO:Importing libraries
2024-11-24 17:40:59,728:INFO:Copying training dataset
2024-11-24 17:40:59,731:INFO:Defining folds
2024-11-24 17:40:59,731:INFO:Declaring metric variables
2024-11-24 17:40:59,734:INFO:Importing untrained model
2024-11-24 17:40:59,736:INFO:Dummy Classifier Imported successfully
2024-11-24 17:40:59,742:INFO:Starting cross validation
2024-11-24 17:40:59,743:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-11-24 17:40:59,924:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,927:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,927:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,928:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,930:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,930:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,930:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,931:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,933:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,933:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,935:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,936:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,936:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,937:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,939:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,939:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,940:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,941:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,941:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,942:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,942:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,943:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,944:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,944:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,946:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,946:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,947:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,947:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,948:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,948:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,948:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,949:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,950:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,950:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,951:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,951:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,953:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,953:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-24 17:40:59,954:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:40:59,961:INFO:Calculating mean and std
2024-11-24 17:40:59,962:INFO:Creating metrics dataframe
2024-11-24 17:40:59,963:INFO:Uploading results into container
2024-11-24 17:40:59,965:INFO:Uploading model into container now
2024-11-24 17:40:59,965:INFO:_master_model_container: 14
2024-11-24 17:40:59,965:INFO:_display_container: 2
2024-11-24 17:40:59,965:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-11-24 17:40:59,965:INFO:create_model() successfully completed......................................
2024-11-24 17:41:00,030:INFO:SubProcess create_model() end ==================================
2024-11-24 17:41:00,031:INFO:Creating metrics dataframe
2024-11-24 17:41:00,039:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-11-24 17:41:00,045:INFO:Initializing create_model()
2024-11-24 17:41:00,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:41:00,045:INFO:Checking exceptions
2024-11-24 17:41:00,047:INFO:Importing libraries
2024-11-24 17:41:00,047:INFO:Copying training dataset
2024-11-24 17:41:00,049:INFO:Defining folds
2024-11-24 17:41:00,050:INFO:Declaring metric variables
2024-11-24 17:41:00,050:INFO:Importing untrained model
2024-11-24 17:41:00,050:INFO:Declaring custom model
2024-11-24 17:41:00,050:INFO:Random Forest Classifier Imported successfully
2024-11-24 17:41:00,051:INFO:Cross validation set to False
2024-11-24 17:41:00,051:INFO:Fitting Model
2024-11-24 17:41:00,254:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:41:00,255:INFO:create_model() successfully completed......................................
2024-11-24 17:41:00,339:INFO:_master_model_container: 14
2024-11-24 17:41:00,339:INFO:_display_container: 2
2024-11-24 17:41:00,340:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:41:00,340:INFO:compare_models() successfully completed......................................
2024-11-24 17:43:17,039:INFO:Initializing evaluate_model()
2024-11-24 17:43:17,039:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-24 17:43:17,050:INFO:Initializing plot_model()
2024-11-24 17:43:17,050:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, system=True)
2024-11-24 17:43:17,050:INFO:Checking exceptions
2024-11-24 17:43:17,073:INFO:Preloading libraries
2024-11-24 17:43:17,081:INFO:Copying training dataset
2024-11-24 17:43:17,081:INFO:Plot type: pipeline
2024-11-24 17:43:17,220:INFO:Visual Rendered Successfully
2024-11-24 17:43:17,286:INFO:plot_model() successfully completed......................................
2024-11-24 17:43:27,459:INFO:Initializing predict_model()
2024-11-24 17:43:27,460:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BD13388160>)
2024-11-24 17:43:27,460:INFO:Checking exceptions
2024-11-24 17:43:27,460:INFO:Preloading libraries
2024-11-24 17:43:27,677:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:43:27,679:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:43:27,681:WARNING:c:\Users\trepa\anaconda3\envs\mlops_course\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-24 17:43:35,991:INFO:Initializing finalize_model()
2024-11-24 17:43:35,991:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-24 17:43:35,991:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-11-24 17:43:35,993:INFO:Initializing create_model()
2024-11-24 17:43:35,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002BD76AA4250>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-24 17:43:35,993:INFO:Checking exceptions
2024-11-24 17:43:35,994:INFO:Importing libraries
2024-11-24 17:43:35,994:INFO:Copying training dataset
2024-11-24 17:43:35,995:INFO:Defining folds
2024-11-24 17:43:35,995:INFO:Declaring metric variables
2024-11-24 17:43:35,995:INFO:Importing untrained model
2024-11-24 17:43:35,995:INFO:Declaring custom model
2024-11-24 17:43:35,995:INFO:Random Forest Classifier Imported successfully
2024-11-24 17:43:35,996:INFO:Cross validation set to False
2024-11-24 17:43:35,997:INFO:Fitting Model
2024-11-24 17:43:36,280:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:43:36,281:INFO:create_model() successfully completed......................................
2024-11-24 17:43:36,345:INFO:_master_model_container: 14
2024-11-24 17:43:36,345:INFO:_display_container: 3
2024-11-24 17:43:36,434:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['Age '],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean')...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=123, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-24 17:43:36,435:INFO:finalize_model() successfully completed......................................
